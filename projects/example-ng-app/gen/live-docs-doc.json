{
  "pipes": [],
  "interfaces": [
    {
      "name": "ApiParameters",
      "id": "interface-ApiParameters-3b59878f74e649afa0ade66873b643a3",
      "file": "projects/ng-live-docs/src/documentation-retriever.service.ts",
      "type": "interface",
      "sourceCode": "import {Type} from '@angular/core';\nimport {CompodocComponent, CompodocModule} from './compodoc/compodoc-schema';\n\n/**\n * Represents the inputClass/outputClass properties of a component in compodoc generated documentation\n */\nexport interface ApiParameters {\n    /**\n     * Represents name of input/output property of a component\n     */\n    name: string;\n    /**\n     * Represents Data type of input/output property\n     */\n    type: string;\n    /**\n     * Represents JS doc of input/output property\n     */\n    description: string;\n}\n\n/**\n * Service exposing methods for retrieving the documentation for a given component.\n */\nexport abstract class DocumentationRetrieverService {\n    /**\n     * Returns the overview help documentation for the provided component\n     */\n    public abstract getOverview(component: Type<any>): string;\n\n    /**\n     * Returns the typescript source code for the provided component\n     */\n    public abstract getTypescriptSourceCode(component: Type<any>): string;\n\n    /**\n     * Returns the HTML source code for the provided component\n     */\n    public abstract getHtmlSourceCode(component: Type<any>): string;\n\n    /**\n     * Returns the CSS source code for the provided component\n     */\n    public abstract getCssSourceCode(component: Type<any>): string;\n\n    /**\n     * Returns the inputsClass property value of the provided component from the Compodoc generated JSON\n     */\n    public abstract getInputParameters(component: Type<any>): ApiParameters[];\n\n    /**\n     * Returns the outputsClass property value of the provided component from the Compodoc generated JSON\n     */\n    public abstract getOutputParameters(component: Type<any>): ApiParameters[];\n\n    /** The raw CompoDoc component */\n    public abstract getComponent(component: Type<any>): CompodocComponent;\n\n    /** The raw Compodoc module object */\n    public abstract getModule(moduleName: string): CompodocModule;\n}\n",
      "properties": [
        {
          "name": "description",
          "type": "string",
          "optional": false,
          "description": "<p>Represents JS doc of input/output property</p>\n",
          "line": 24
        },
        {
          "name": "name",
          "type": "string",
          "optional": false,
          "description": "<p>Represents name of input/output property of a component</p>\n",
          "line": 16
        },
        {
          "name": "type",
          "type": "string",
          "optional": false,
          "description": "<p>Represents Data type of input/output property</p>\n",
          "line": 20
        }
      ],
      "indexSignatures": [],
      "kind": 150,
      "description": "<p>Represents the inputClass/outputClass properties of a component in compodoc generated documentation</p>\n",
      "methods": []
    },
    {
      "name": "CompodocComponent",
      "id": "interface-CompodocComponent-84c359c1e35dbd6f2515de8674e5bdc3",
      "file": "projects/ng-live-docs/src/compodoc/compodoc-schema.ts",
      "type": "interface",
      "sourceCode": "import {ApiParameters} from '../documentation-retriever.service';\n\n/**\n * The root object of the compodoc autogenerated documentation (documentation.json)\n */\nexport interface CompodocSchema {\n    components: CompodocComponent[];\n    modules: CompodocModule[];\n}\n\n/**\n * Component description as defined in the Compodoc generated documentation JSON\n */\nexport interface CompodocComponent {\n    name: string;\n    description: string;\n    sourceCode: string;\n    templateUrl: string[];\n    templateData: string;\n    styleUrls: string[];\n    styleUrlsData: StyleUrlsData[];\n    inputsClass: ApiParameters[];\n    outputsClass: ApiParameters[];\n    file: string;\n    selector: string;\n}\n\nexport interface CompodocModule {\n    /**\n     * Name of the class that has the @NgModule() declaration\n     */\n    name: string;\n    path: string;\n    sourceCode: string;\n    children: {\n        type: string;\n        elements: { name: string }[];\n    }[];\n}\n\nexport interface StyleUrlsData {\n    data: string;\n    styleUrl: string;\n}\n",
      "properties": [
        {
          "name": "description",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 25
        },
        {
          "name": "file",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 33
        },
        {
          "name": "inputsClass",
          "type": "ApiParameters[]",
          "optional": false,
          "description": "",
          "line": 31
        },
        {
          "name": "name",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 24
        },
        {
          "name": "outputsClass",
          "type": "ApiParameters[]",
          "optional": false,
          "description": "",
          "line": 32
        },
        {
          "name": "selector",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 34
        },
        {
          "name": "sourceCode",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 26
        },
        {
          "name": "styleUrls",
          "type": "string[]",
          "optional": false,
          "description": "",
          "line": 29
        },
        {
          "name": "styleUrlsData",
          "type": "StyleUrlsData[]",
          "optional": false,
          "description": "",
          "line": 30
        },
        {
          "name": "templateData",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 28
        },
        {
          "name": "templateUrl",
          "type": "string[]",
          "optional": false,
          "description": "",
          "line": 27
        }
      ],
      "indexSignatures": [],
      "kind": 150,
      "description": "<p>Component description as defined in the Compodoc generated documentation JSON</p>\n",
      "methods": []
    },
    {
      "name": "CompodocModule",
      "id": "interface-CompodocModule-84c359c1e35dbd6f2515de8674e5bdc3",
      "file": "projects/ng-live-docs/src/compodoc/compodoc-schema.ts",
      "type": "interface",
      "sourceCode": "import {ApiParameters} from '../documentation-retriever.service';\n\n/**\n * The root object of the compodoc autogenerated documentation (documentation.json)\n */\nexport interface CompodocSchema {\n    components: CompodocComponent[];\n    modules: CompodocModule[];\n}\n\n/**\n * Component description as defined in the Compodoc generated documentation JSON\n */\nexport interface CompodocComponent {\n    name: string;\n    description: string;\n    sourceCode: string;\n    templateUrl: string[];\n    templateData: string;\n    styleUrls: string[];\n    styleUrlsData: StyleUrlsData[];\n    inputsClass: ApiParameters[];\n    outputsClass: ApiParameters[];\n    file: string;\n    selector: string;\n}\n\nexport interface CompodocModule {\n    /**\n     * Name of the class that has the @NgModule() declaration\n     */\n    name: string;\n    path: string;\n    sourceCode: string;\n    children: {\n        type: string;\n        elements: { name: string }[];\n    }[];\n}\n\nexport interface StyleUrlsData {\n    data: string;\n    styleUrl: string;\n}\n",
      "properties": [
        {
          "name": "children",
          "type": "literal type[]",
          "optional": false,
          "description": "",
          "line": 44
        },
        {
          "name": "name",
          "type": "string",
          "optional": false,
          "description": "<p>Name of the class that has the @NgModule() declaration</p>\n",
          "line": 41
        },
        {
          "name": "path",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 42
        },
        {
          "name": "sourceCode",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 43
        }
      ],
      "indexSignatures": [],
      "kind": 150,
      "methods": []
    },
    {
      "name": "CompodocSchema",
      "id": "interface-CompodocSchema-84c359c1e35dbd6f2515de8674e5bdc3",
      "file": "projects/ng-live-docs/src/compodoc/compodoc-schema.ts",
      "type": "interface",
      "sourceCode": "import {ApiParameters} from '../documentation-retriever.service';\n\n/**\n * The root object of the compodoc autogenerated documentation (documentation.json)\n */\nexport interface CompodocSchema {\n    components: CompodocComponent[];\n    modules: CompodocModule[];\n}\n\n/**\n * Component description as defined in the Compodoc generated documentation JSON\n */\nexport interface CompodocComponent {\n    name: string;\n    description: string;\n    sourceCode: string;\n    templateUrl: string[];\n    templateData: string;\n    styleUrls: string[];\n    styleUrlsData: StyleUrlsData[];\n    inputsClass: ApiParameters[];\n    outputsClass: ApiParameters[];\n    file: string;\n    selector: string;\n}\n\nexport interface CompodocModule {\n    /**\n     * Name of the class that has the @NgModule() declaration\n     */\n    name: string;\n    path: string;\n    sourceCode: string;\n    children: {\n        type: string;\n        elements: { name: string }[];\n    }[];\n}\n\nexport interface StyleUrlsData {\n    data: string;\n    styleUrl: string;\n}\n",
      "properties": [
        {
          "name": "components",
          "type": "CompodocComponent[]",
          "optional": false,
          "description": "",
          "line": 16
        },
        {
          "name": "modules",
          "type": "CompodocModule[]",
          "optional": false,
          "description": "",
          "line": 17
        }
      ],
      "indexSignatures": [],
      "kind": 150,
      "description": "<p>The root object of the compodoc autogenerated documentation (documentation.json)</p>\n",
      "methods": []
    },
    {
      "name": "DocumentationEntry",
      "id": "interface-DocumentationEntry-edc50d0d3b5c967242bd8de5e8e09809",
      "file": "projects/ng-live-docs/src/documentation.ts",
      "type": "interface",
      "sourceCode": "import { Type } from '@angular/core';\nimport { Routes } from '@angular/router';\nimport { DocumentationContainerComponent } from './documentation-container/documentation-container.component';\n\n/**\n * Represents each entry in {@link DocumentationEntry.examples}, that is an examples that shows a particular usage of a components\n */\nexport interface ExampleEntry {\n    /**\n     * Example component written to show usage of the component\n     */\n    component: Type<unknown>;\n\n    /**\n     * The component for which this example is written\n     */\n    forComponent: Type<unknown>;\n\n    /**\n     * The title of the section under which this example will be placed\n     */\n    title: string;\n}\n\n/**\n * Represents a component being showcased, along with the examples for it.\n */\nexport interface DocumentationEntry {\n    /**\n     * The display name that is going to be used for the component\n     */\n    displayName: string;\n\n    /**\n     * The segment to be used in routing when displaying the documentation for this component.\n     */\n    urlSegment: string;\n\n    /**\n     * The component for which the documentation is going to be generated\n     */\n    component: Type<unknown>;\n\n    /**\n     * A list of examples that will show how the component may be used\n     */\n    examples?: ExampleEntry[];\n}\n\n/**\n * To register a documentation entry as value for corresponding component\n */\nconst documentationEntryMap = new Map<Type<unknown>, DocumentationEntry>();\n\n/**\n * Used in {@link Documentation.registerDocumentationEntry} method to check if the input is a valid {@link DocumentationEntry}\n */\nfunction validateDocumentationMetadata(documentationParams: DocumentationEntry): void {\n    if (!documentationParams.urlSegment) {\n        throw new Error('urlSegment should be specified and not empty');\n    }\n\n    const documentationEntry = Documentation.getAllEntries().find(\n        entry => entry.urlSegment === documentationParams.urlSegment\n    );\n    if (documentationEntry) {\n        throw new Error(\n            `The specified urlSegment '${documentationParams.urlSegment}' for '${documentationParams.displayName}'` +\n                `was already defined for '${documentationEntry.displayName}'`\n        );\n    }\n\n    if (!documentationParams.displayName) {\n        throw new Error('displayName should be specified and not empty');\n    }\n}\n\nexport const Documentation = {\n    /**\n     * Returns all the documentation entries registered into the framework\n     */\n    getAllEntries(): DocumentationEntry[] {\n        return Array.from(documentationEntryMap.values());\n    },\n\n    /**\n     * Returns angular routes used when displaying the documentation/examples for the components.\n     */\n    getRoutes(): Routes {\n        return Documentation.getAllEntries().map((documentationEntry: DocumentationEntry) => ({\n            path: documentationEntry.urlSegment,\n            component: DocumentationContainerComponent,\n            data: { documentationEntry },\n        }));\n    },\n\n    /**\n     * Used for manual registration of documentation entry with a corresponding component.\n     */\n    registerDocumentationEntry(documentationEntry: DocumentationEntry): void {\n        validateDocumentationMetadata(documentationEntry);\n        documentationEntryMap.set(documentationEntry.component, documentationEntry);\n    },\n};\n",
      "properties": [
        {
          "name": "component",
          "type": "Type<unknown>",
          "optional": false,
          "description": "<p>The component for which the documentation is going to be generated</p>\n",
          "line": 47
        },
        {
          "name": "displayName",
          "type": "string",
          "optional": false,
          "description": "<p>The display name that is going to be used for the component</p>\n",
          "line": 37
        },
        {
          "name": "examples",
          "type": "ExampleEntry[]",
          "optional": true,
          "description": "<p>A list of examples that will show how the component may be used</p>\n",
          "line": 52
        },
        {
          "name": "urlSegment",
          "type": "string",
          "optional": false,
          "description": "<p>The segment to be used in routing when displaying the documentation for this component.</p>\n",
          "line": 42
        }
      ],
      "indexSignatures": [],
      "kind": 150,
      "description": "<p>Represents a component being showcased, along with the examples for it.</p>\n",
      "methods": []
    },
    {
      "name": "ExampleEntry",
      "id": "interface-ExampleEntry-edc50d0d3b5c967242bd8de5e8e09809",
      "file": "projects/ng-live-docs/src/documentation.ts",
      "type": "interface",
      "sourceCode": "import { Type } from '@angular/core';\nimport { Routes } from '@angular/router';\nimport { DocumentationContainerComponent } from './documentation-container/documentation-container.component';\n\n/**\n * Represents each entry in {@link DocumentationEntry.examples}, that is an examples that shows a particular usage of a components\n */\nexport interface ExampleEntry {\n    /**\n     * Example component written to show usage of the component\n     */\n    component: Type<unknown>;\n\n    /**\n     * The component for which this example is written\n     */\n    forComponent: Type<unknown>;\n\n    /**\n     * The title of the section under which this example will be placed\n     */\n    title: string;\n}\n\n/**\n * Represents a component being showcased, along with the examples for it.\n */\nexport interface DocumentationEntry {\n    /**\n     * The display name that is going to be used for the component\n     */\n    displayName: string;\n\n    /**\n     * The segment to be used in routing when displaying the documentation for this component.\n     */\n    urlSegment: string;\n\n    /**\n     * The component for which the documentation is going to be generated\n     */\n    component: Type<unknown>;\n\n    /**\n     * A list of examples that will show how the component may be used\n     */\n    examples?: ExampleEntry[];\n}\n\n/**\n * To register a documentation entry as value for corresponding component\n */\nconst documentationEntryMap = new Map<Type<unknown>, DocumentationEntry>();\n\n/**\n * Used in {@link Documentation.registerDocumentationEntry} method to check if the input is a valid {@link DocumentationEntry}\n */\nfunction validateDocumentationMetadata(documentationParams: DocumentationEntry): void {\n    if (!documentationParams.urlSegment) {\n        throw new Error('urlSegment should be specified and not empty');\n    }\n\n    const documentationEntry = Documentation.getAllEntries().find(\n        entry => entry.urlSegment === documentationParams.urlSegment\n    );\n    if (documentationEntry) {\n        throw new Error(\n            `The specified urlSegment '${documentationParams.urlSegment}' for '${documentationParams.displayName}'` +\n                `was already defined for '${documentationEntry.displayName}'`\n        );\n    }\n\n    if (!documentationParams.displayName) {\n        throw new Error('displayName should be specified and not empty');\n    }\n}\n\nexport const Documentation = {\n    /**\n     * Returns all the documentation entries registered into the framework\n     */\n    getAllEntries(): DocumentationEntry[] {\n        return Array.from(documentationEntryMap.values());\n    },\n\n    /**\n     * Returns angular routes used when displaying the documentation/examples for the components.\n     */\n    getRoutes(): Routes {\n        return Documentation.getAllEntries().map((documentationEntry: DocumentationEntry) => ({\n            path: documentationEntry.urlSegment,\n            component: DocumentationContainerComponent,\n            data: { documentationEntry },\n        }));\n    },\n\n    /**\n     * Used for manual registration of documentation entry with a corresponding component.\n     */\n    registerDocumentationEntry(documentationEntry: DocumentationEntry): void {\n        validateDocumentationMetadata(documentationEntry);\n        documentationEntryMap.set(documentationEntry.component, documentationEntry);\n    },\n};\n",
      "properties": [
        {
          "name": "component",
          "type": "Type<unknown>",
          "optional": false,
          "description": "<p>Example component written to show usage of the component</p>\n",
          "line": 17
        },
        {
          "name": "forComponent",
          "type": "Type<unknown>",
          "optional": false,
          "description": "<p>The component for which this example is written</p>\n",
          "line": 22
        },
        {
          "name": "title",
          "type": "string",
          "optional": false,
          "description": "<p>The title of the section under which this example will be placed</p>\n",
          "line": 27
        }
      ],
      "indexSignatures": [],
      "kind": 150,
      "description": "<p>Represents each entry in {@link DocumentationEntry.examples}, that is an examples that shows a particular usage of a components</p>\n",
      "methods": []
    },
    {
      "name": "ModuleEntries",
      "id": "interface-ModuleEntries-d725587b30a9cc6301223d127855acd0",
      "file": "projects/ng-live-docs/scripts/create-module-data.ts",
      "type": "interface",
      "sourceCode": "import * as ts from 'typescript';\n\ninterface ModuleEntry {\n    className: string;\n    path: string;\n    sourceCode: string;\n}\n\nconst NG_MODULE = 'NgModule';\n\ninterface ModuleEntries {\n    [className: string]: ModuleEntry;\n}\n\n/**\n * Get the source code for files containing NgModules\n * @param fileNames Entry points to be scanned\n * @param options Options to be passed to `ts.createProgram`\n * @return A map keyed by the module class names\n */\nfunction generateDocumentation(fileNames: string[], options: ts.CompilerOptions): ModuleEntries {\n    const program = ts.createProgram(fileNames, options);\n    const output: ModuleEntries = {};\n    let sourceFile: ts.SourceFile;\n\n    // Visit every sourceFile in the program\n    for (sourceFile of program.getSourceFiles()) {\n        if (sourceFile.fileName.includes('.module.ts')) {\n            // Walk the tree to search for classes\n            ts.forEachChild(sourceFile, visit);\n        }\n    }\n    return output;\n\n    /** visit nodes finding exported classes */\n    function visit(node: ts.Node): void {\n        if (isClassDeclarationNode(node)) {\n            if (isNgModuleClass(node as ts.ClassDeclaration)) {\n                const module = serializeModule(node);\n                output[module.className] = module;\n            }\n        } else if (node.kind === ts.SyntaxKind.ModuleDeclaration) {\n            // This is a namespace, visit its children\n            ts.forEachChild(node, visit);\n        }\n    }\n\n    function isNgModuleClass(cls: ts.ClassDeclaration): boolean {\n        return !!cls.decorators.find(decorator => {\n            return (decorator.expression.getFirstToken(sourceFile) as ts.Identifier).text === NG_MODULE;\n        });\n    }\n\n    function serializeModule(node: ts.ClassDeclaration): ModuleEntry {\n        return {\n            className: node.name.escapedText.toString(),\n            path: sourceFile.fileName,\n            sourceCode: sourceFile.getFullText(),\n        };\n    }\n\n    function isClassDeclarationNode(node: ts.Node): node is ts.ClassDeclaration {\n        return node.kind === ts.SyntaxKind.ClassDeclaration;\n    }\n}\n\nconst modules = generateDocumentation(process.argv.slice(2), {\n    target: ts.ScriptTarget.ES5,\n    module: ts.ModuleKind.CommonJS,\n});\n\nconsole.log(JSON.stringify(modules, undefined, 4));\n",
      "properties": [],
      "indexSignatures": [
        {
          "id": "index-declaration-d725587b30a9cc6301223d127855acd0",
          "args": [
            {
              "name": "className",
              "type": "string"
            }
          ],
          "returnType": "ModuleEntry",
          "line": 15
        }
      ],
      "kind": 159,
      "methods": []
    },
    {
      "name": "ModuleEntry",
      "id": "interface-ModuleEntry-d725587b30a9cc6301223d127855acd0",
      "file": "projects/ng-live-docs/scripts/create-module-data.ts",
      "type": "interface",
      "sourceCode": "import * as ts from 'typescript';\n\ninterface ModuleEntry {\n    className: string;\n    path: string;\n    sourceCode: string;\n}\n\nconst NG_MODULE = 'NgModule';\n\ninterface ModuleEntries {\n    [className: string]: ModuleEntry;\n}\n\n/**\n * Get the source code for files containing NgModules\n * @param fileNames Entry points to be scanned\n * @param options Options to be passed to `ts.createProgram`\n * @return A map keyed by the module class names\n */\nfunction generateDocumentation(fileNames: string[], options: ts.CompilerOptions): ModuleEntries {\n    const program = ts.createProgram(fileNames, options);\n    const output: ModuleEntries = {};\n    let sourceFile: ts.SourceFile;\n\n    // Visit every sourceFile in the program\n    for (sourceFile of program.getSourceFiles()) {\n        if (sourceFile.fileName.includes('.module.ts')) {\n            // Walk the tree to search for classes\n            ts.forEachChild(sourceFile, visit);\n        }\n    }\n    return output;\n\n    /** visit nodes finding exported classes */\n    function visit(node: ts.Node): void {\n        if (isClassDeclarationNode(node)) {\n            if (isNgModuleClass(node as ts.ClassDeclaration)) {\n                const module = serializeModule(node);\n                output[module.className] = module;\n            }\n        } else if (node.kind === ts.SyntaxKind.ModuleDeclaration) {\n            // This is a namespace, visit its children\n            ts.forEachChild(node, visit);\n        }\n    }\n\n    function isNgModuleClass(cls: ts.ClassDeclaration): boolean {\n        return !!cls.decorators.find(decorator => {\n            return (decorator.expression.getFirstToken(sourceFile) as ts.Identifier).text === NG_MODULE;\n        });\n    }\n\n    function serializeModule(node: ts.ClassDeclaration): ModuleEntry {\n        return {\n            className: node.name.escapedText.toString(),\n            path: sourceFile.fileName,\n            sourceCode: sourceFile.getFullText(),\n        };\n    }\n\n    function isClassDeclarationNode(node: ts.Node): node is ts.ClassDeclaration {\n        return node.kind === ts.SyntaxKind.ClassDeclaration;\n    }\n}\n\nconst modules = generateDocumentation(process.argv.slice(2), {\n    target: ts.ScriptTarget.ES5,\n    module: ts.ModuleKind.CommonJS,\n});\n\nconsole.log(JSON.stringify(modules, undefined, 4));\n",
      "properties": [
        {
          "name": "className",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 8
        },
        {
          "name": "path",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 9
        },
        {
          "name": "sourceCode",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 10
        }
      ],
      "indexSignatures": [],
      "kind": 150,
      "methods": []
    },
    {
      "name": "StackBlitzDependencies",
      "id": "interface-StackBlitzDependencies-178598dd0fa2395f5edc62f30b8c513e",
      "file": "projects/ng-live-docs/src/stack-blitz-writer.service.ts",
      "type": "interface",
      "sourceCode": "import { Inject, InjectionToken } from '@angular/core';\nimport sdk from '@stackblitz/sdk';\nimport { OpenOptions, Project } from '@stackblitz/sdk/typings/interfaces';\nimport { CompodocComponent, CompodocModule } from './compodoc/compodoc-schema';\nimport { ExampleEntry } from './documentation';\nimport { DocumentationRetrieverService } from './documentation-retriever.service';\n\nexport interface StackBlitzInfo {\n    /** Something like 'vcd-ui-cc-starter-clarity-v8-yhe4yg', then ID of a StackBlitz URL */\n    templateId: string;\n    /** The name of the project displaying examples */\n    projectName: string;\n\n    /**\n     * Finds a module for a component\n     * If this is null or an empty string is returned, the module is not added to the example\n     */\n    moduleFinder?(componentName: string): string;\n}\n\nexport const STACKBLITZ_INFO = new InjectionToken<StackBlitzInfo>('StackBlitz Template information');\n\nconst APP_MODULE = 'src/app/app.module.ts';\nconst APP_COMPONENT_HTML = 'src/app/app.component.html';\n\n/**\n * Map of file names to their content\n */\ninterface StackBlitzFileSystem {\n    [filePath: string]: string;\n}\n\n/**\n * Map of package name to version numbers\n */\ninterface StackBlitzDependencies {\n    [packageName: string]: string;\n}\n\n/**\n *\n * Given an existing stackblitz containing a few placeholders, it modifies that stackblitz adding a new component\n * to app.component.html and its module to app.module.ts\n *\n * import { NgModule } from \"@angular/core\";\n * import { BrowserModule } from \"@angular/platform-browser\";\n * import { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\n * import { FormsModule } from \"@angular/forms\";\n * import { ClarityModule } from \"@clr/angular\";\n * import { AppComponent } from \"./app.component\";\n * //__EXAMPLE_MODULE_IMPORT_LINE;\n *\n * @NgModule({\n *   imports: [\n *     BrowserModule,\n *     BrowserAnimationsModule,\n *     ClarityModule,\n *     FormsModule,\n *     //__EXAMPLE_NG_MODULE_IMPORTS_ENTRY\n *   ],\n *   declarations: [AppComponent],\n *   bootstrap: [AppComponent]\n * })\n * export class AppModule {}\n */\n\nexport class StackBlitzWriterService {\n    constructor(\n        @Inject(STACKBLITZ_INFO) private stackBlitzInfo: StackBlitzInfo,\n        private docRetriever: DocumentationRetrieverService\n    ) {\n        // Temporary until VDCUCC-75\n        // this.fetchSbTemplate();\n    }\n\n    private template: [StackBlitzFileSystem, StackBlitzDependencies] = null;\n\n    /**\n     * @param entry The example to be displayed in StackBlitz\n     */\n    async openStackBlitz(entry: ExampleEntry): Promise<void> {\n        const exampleComponent = this.docRetriever.getComponent(entry.component);\n        let exampleModule: CompodocModule;\n        if (this.stackBlitzInfo.moduleFinder) {\n            const moduleName = this.stackBlitzInfo.moduleFinder(exampleComponent.name);\n            exampleModule = this.docRetriever.getModule(moduleName);\n        }\n\n        const [templateFiles, dependencies] = await this.fetchSbTemplate();\n        const [mergedFiles, openFile] = this.createPatch(templateFiles, exampleComponent, exampleModule);\n\n        const project: Project = {\n            title: this.stackBlitzInfo.templateId,\n            description: entry.title,\n            template: 'angular-cli',\n            dependencies,\n            files: mergedFiles,\n        };\n        const openOptions: OpenOptions = {\n            openFile,\n            newWindow: true,\n        };\n        return sdk.openProject(project, openOptions);\n    }\n\n    private createPatch(\n        templateFs: StackBlitzFileSystem,\n        exampleComponent: CompodocComponent,\n        module?: CompodocModule\n    ): [StackBlitzFileSystem, string] {\n        const componentTsFile = this.getFileName(exampleComponent.file);\n        const changedFiles = {\n            [APP_MODULE]: this.mergeAppModule(module, templateFs),\n            [APP_COMPONENT_HTML]: this.mergeAppHtml(exampleComponent, templateFs),\n            [componentTsFile]: exampleComponent.sourceCode,\n            [this.getFileName(module.path)]: module.sourceCode,\n        };\n\n        let defaultFile = componentTsFile;\n\n        if (exampleComponent.templateUrl && exampleComponent.templateUrl.length > 0) {\n            const fileName = removeLeadingDotSlash(exampleComponent.templateUrl[0]);\n            const htmlFile = this.getFileName(fileName);\n            changedFiles[htmlFile] = exampleComponent.templateData;\n            // If HTML is provided, use that as the default file\n            defaultFile = htmlFile;\n        }\n\n        if (exampleComponent.styleUrlsData && exampleComponent.styleUrlsData.length > 0) {\n            const styleData = exampleComponent.styleUrlsData[0];\n            const fileName = removeLeadingDotSlash(styleData.styleUrl);\n            changedFiles[this.getFileName(fileName)] = styleData.data;\n        }\n\n        const mergedFs = { ...templateFs, ...changedFiles };\n\n        return [mergedFs, defaultFile];\n\n        /**\n         * @param fileName a fileName path that may start with ./\n         * @return A filename, without ./ in the front\n         */\n        function removeLeadingDotSlash(fileName: string): string {\n            if (fileName.startsWith('./')) {\n                fileName = fileName.slice(2);\n            }\n            return fileName;\n        }\n    }\n\n    /**\n     * Fetches an existing Stackblitz's files and dependencies by embedding it on the page and removing it when finished.\n     * The result is cached for future calls.\n     */\n    private async fetchSbTemplate(): Promise<[StackBlitzFileSystem, StackBlitzDependencies]> {\n        if (this.template) {\n            return Promise.resolve(this.template);\n        }\n\n        // StackBlitz's API replaces the DOM node you give it, so we need an extra node\n        // so we can remove the created iFRAME\n        const iframeContainer = document.createElement('div');\n        const iframeContainerParent = document.createElement('div');\n        iframeContainerParent.appendChild(iframeContainer);\n        iframeContainerParent.style.visibility = 'hidden';\n        iframeContainerParent.style.position = 'absolute';\n        document.body.appendChild(iframeContainerParent);\n        const vm = await sdk.embedProjectId(iframeContainer, this.stackBlitzInfo.templateId, { view: 'editor' });\n        this.template = [await vm.getFsSnapshot(), await vm.getDependencies()];\n        document.body.removeChild(iframeContainerParent);\n        return Promise.resolve(this.template);\n    }\n\n    /**\n     * Returns just the filename part of a path prefixed by 'src/app/'\n     * @param path Path to be shortened to just its filename and put under src/app\n     * @param prefix A new path to be inserted before the filename\n     */\n    private getFileName(path: string, prefix: string = 'src/app/'): string {\n        return prefix + path.slice(path.lastIndexOf('/') + 1);\n    }\n\n    private mergeAppModule(module: CompodocModule, fileSystem: StackBlitzFileSystem): string {\n        const moduleFileName = this.getFileName(module.path, '').replace(/\\.ts$/, '');\n        const moduleName = module.name;\n        return fileSystem[APP_MODULE].replace(\n            '//__EXAMPLE_MODULE_IMPORT_LINE',\n            `import {${moduleName}} from \"./${moduleFileName}\";`\n        ).replace('//__EXAMPLE_NG_MODULE_IMPORTS_ENTRY', moduleName);\n    }\n\n    private mergeAppHtml(component: CompodocComponent, fileSystem: StackBlitzFileSystem): string {\n        const tag = '<x></x>'.replace(/x/g, component.selector);\n        return fileSystem[APP_COMPONENT_HTML].replace(/__EXAMPLE_TAG/, tag);\n    }\n}\n",
      "properties": [],
      "indexSignatures": [
        {
          "id": "index-declaration-178598dd0fa2395f5edc62f30b8c513e",
          "args": [
            {
              "name": "packageName",
              "type": "string"
            }
          ],
          "returnType": "string",
          "line": 41
        }
      ],
      "kind": 159,
      "description": "<p>Map of package name to version numbers</p>\n",
      "methods": []
    },
    {
      "name": "StackBlitzFileSystem",
      "id": "interface-StackBlitzFileSystem-178598dd0fa2395f5edc62f30b8c513e",
      "file": "projects/ng-live-docs/src/stack-blitz-writer.service.ts",
      "type": "interface",
      "sourceCode": "import { Inject, InjectionToken } from '@angular/core';\nimport sdk from '@stackblitz/sdk';\nimport { OpenOptions, Project } from '@stackblitz/sdk/typings/interfaces';\nimport { CompodocComponent, CompodocModule } from './compodoc/compodoc-schema';\nimport { ExampleEntry } from './documentation';\nimport { DocumentationRetrieverService } from './documentation-retriever.service';\n\nexport interface StackBlitzInfo {\n    /** Something like 'vcd-ui-cc-starter-clarity-v8-yhe4yg', then ID of a StackBlitz URL */\n    templateId: string;\n    /** The name of the project displaying examples */\n    projectName: string;\n\n    /**\n     * Finds a module for a component\n     * If this is null or an empty string is returned, the module is not added to the example\n     */\n    moduleFinder?(componentName: string): string;\n}\n\nexport const STACKBLITZ_INFO = new InjectionToken<StackBlitzInfo>('StackBlitz Template information');\n\nconst APP_MODULE = 'src/app/app.module.ts';\nconst APP_COMPONENT_HTML = 'src/app/app.component.html';\n\n/**\n * Map of file names to their content\n */\ninterface StackBlitzFileSystem {\n    [filePath: string]: string;\n}\n\n/**\n * Map of package name to version numbers\n */\ninterface StackBlitzDependencies {\n    [packageName: string]: string;\n}\n\n/**\n *\n * Given an existing stackblitz containing a few placeholders, it modifies that stackblitz adding a new component\n * to app.component.html and its module to app.module.ts\n *\n * import { NgModule } from \"@angular/core\";\n * import { BrowserModule } from \"@angular/platform-browser\";\n * import { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\n * import { FormsModule } from \"@angular/forms\";\n * import { ClarityModule } from \"@clr/angular\";\n * import { AppComponent } from \"./app.component\";\n * //__EXAMPLE_MODULE_IMPORT_LINE;\n *\n * @NgModule({\n *   imports: [\n *     BrowserModule,\n *     BrowserAnimationsModule,\n *     ClarityModule,\n *     FormsModule,\n *     //__EXAMPLE_NG_MODULE_IMPORTS_ENTRY\n *   ],\n *   declarations: [AppComponent],\n *   bootstrap: [AppComponent]\n * })\n * export class AppModule {}\n */\n\nexport class StackBlitzWriterService {\n    constructor(\n        @Inject(STACKBLITZ_INFO) private stackBlitzInfo: StackBlitzInfo,\n        private docRetriever: DocumentationRetrieverService\n    ) {\n        // Temporary until VDCUCC-75\n        // this.fetchSbTemplate();\n    }\n\n    private template: [StackBlitzFileSystem, StackBlitzDependencies] = null;\n\n    /**\n     * @param entry The example to be displayed in StackBlitz\n     */\n    async openStackBlitz(entry: ExampleEntry): Promise<void> {\n        const exampleComponent = this.docRetriever.getComponent(entry.component);\n        let exampleModule: CompodocModule;\n        if (this.stackBlitzInfo.moduleFinder) {\n            const moduleName = this.stackBlitzInfo.moduleFinder(exampleComponent.name);\n            exampleModule = this.docRetriever.getModule(moduleName);\n        }\n\n        const [templateFiles, dependencies] = await this.fetchSbTemplate();\n        const [mergedFiles, openFile] = this.createPatch(templateFiles, exampleComponent, exampleModule);\n\n        const project: Project = {\n            title: this.stackBlitzInfo.templateId,\n            description: entry.title,\n            template: 'angular-cli',\n            dependencies,\n            files: mergedFiles,\n        };\n        const openOptions: OpenOptions = {\n            openFile,\n            newWindow: true,\n        };\n        return sdk.openProject(project, openOptions);\n    }\n\n    private createPatch(\n        templateFs: StackBlitzFileSystem,\n        exampleComponent: CompodocComponent,\n        module?: CompodocModule\n    ): [StackBlitzFileSystem, string] {\n        const componentTsFile = this.getFileName(exampleComponent.file);\n        const changedFiles = {\n            [APP_MODULE]: this.mergeAppModule(module, templateFs),\n            [APP_COMPONENT_HTML]: this.mergeAppHtml(exampleComponent, templateFs),\n            [componentTsFile]: exampleComponent.sourceCode,\n            [this.getFileName(module.path)]: module.sourceCode,\n        };\n\n        let defaultFile = componentTsFile;\n\n        if (exampleComponent.templateUrl && exampleComponent.templateUrl.length > 0) {\n            const fileName = removeLeadingDotSlash(exampleComponent.templateUrl[0]);\n            const htmlFile = this.getFileName(fileName);\n            changedFiles[htmlFile] = exampleComponent.templateData;\n            // If HTML is provided, use that as the default file\n            defaultFile = htmlFile;\n        }\n\n        if (exampleComponent.styleUrlsData && exampleComponent.styleUrlsData.length > 0) {\n            const styleData = exampleComponent.styleUrlsData[0];\n            const fileName = removeLeadingDotSlash(styleData.styleUrl);\n            changedFiles[this.getFileName(fileName)] = styleData.data;\n        }\n\n        const mergedFs = { ...templateFs, ...changedFiles };\n\n        return [mergedFs, defaultFile];\n\n        /**\n         * @param fileName a fileName path that may start with ./\n         * @return A filename, without ./ in the front\n         */\n        function removeLeadingDotSlash(fileName: string): string {\n            if (fileName.startsWith('./')) {\n                fileName = fileName.slice(2);\n            }\n            return fileName;\n        }\n    }\n\n    /**\n     * Fetches an existing Stackblitz's files and dependencies by embedding it on the page and removing it when finished.\n     * The result is cached for future calls.\n     */\n    private async fetchSbTemplate(): Promise<[StackBlitzFileSystem, StackBlitzDependencies]> {\n        if (this.template) {\n            return Promise.resolve(this.template);\n        }\n\n        // StackBlitz's API replaces the DOM node you give it, so we need an extra node\n        // so we can remove the created iFRAME\n        const iframeContainer = document.createElement('div');\n        const iframeContainerParent = document.createElement('div');\n        iframeContainerParent.appendChild(iframeContainer);\n        iframeContainerParent.style.visibility = 'hidden';\n        iframeContainerParent.style.position = 'absolute';\n        document.body.appendChild(iframeContainerParent);\n        const vm = await sdk.embedProjectId(iframeContainer, this.stackBlitzInfo.templateId, { view: 'editor' });\n        this.template = [await vm.getFsSnapshot(), await vm.getDependencies()];\n        document.body.removeChild(iframeContainerParent);\n        return Promise.resolve(this.template);\n    }\n\n    /**\n     * Returns just the filename part of a path prefixed by 'src/app/'\n     * @param path Path to be shortened to just its filename and put under src/app\n     * @param prefix A new path to be inserted before the filename\n     */\n    private getFileName(path: string, prefix: string = 'src/app/'): string {\n        return prefix + path.slice(path.lastIndexOf('/') + 1);\n    }\n\n    private mergeAppModule(module: CompodocModule, fileSystem: StackBlitzFileSystem): string {\n        const moduleFileName = this.getFileName(module.path, '').replace(/\\.ts$/, '');\n        const moduleName = module.name;\n        return fileSystem[APP_MODULE].replace(\n            '//__EXAMPLE_MODULE_IMPORT_LINE',\n            `import {${moduleName}} from \"./${moduleFileName}\";`\n        ).replace('//__EXAMPLE_NG_MODULE_IMPORTS_ENTRY', moduleName);\n    }\n\n    private mergeAppHtml(component: CompodocComponent, fileSystem: StackBlitzFileSystem): string {\n        const tag = '<x></x>'.replace(/x/g, component.selector);\n        return fileSystem[APP_COMPONENT_HTML].replace(/__EXAMPLE_TAG/, tag);\n    }\n}\n",
      "properties": [],
      "indexSignatures": [
        {
          "id": "index-declaration-178598dd0fa2395f5edc62f30b8c513e",
          "args": [
            {
              "name": "filePath",
              "type": "string"
            }
          ],
          "returnType": "string",
          "line": 34
        }
      ],
      "kind": 159,
      "description": "<p>Map of file names to their content</p>\n",
      "methods": []
    },
    {
      "name": "StackBlitzInfo",
      "id": "interface-StackBlitzInfo-178598dd0fa2395f5edc62f30b8c513e",
      "file": "projects/ng-live-docs/src/stack-blitz-writer.service.ts",
      "type": "interface",
      "sourceCode": "import { Inject, InjectionToken } from '@angular/core';\nimport sdk from '@stackblitz/sdk';\nimport { OpenOptions, Project } from '@stackblitz/sdk/typings/interfaces';\nimport { CompodocComponent, CompodocModule } from './compodoc/compodoc-schema';\nimport { ExampleEntry } from './documentation';\nimport { DocumentationRetrieverService } from './documentation-retriever.service';\n\nexport interface StackBlitzInfo {\n    /** Something like 'vcd-ui-cc-starter-clarity-v8-yhe4yg', then ID of a StackBlitz URL */\n    templateId: string;\n    /** The name of the project displaying examples */\n    projectName: string;\n\n    /**\n     * Finds a module for a component\n     * If this is null or an empty string is returned, the module is not added to the example\n     */\n    moduleFinder?(componentName: string): string;\n}\n\nexport const STACKBLITZ_INFO = new InjectionToken<StackBlitzInfo>('StackBlitz Template information');\n\nconst APP_MODULE = 'src/app/app.module.ts';\nconst APP_COMPONENT_HTML = 'src/app/app.component.html';\n\n/**\n * Map of file names to their content\n */\ninterface StackBlitzFileSystem {\n    [filePath: string]: string;\n}\n\n/**\n * Map of package name to version numbers\n */\ninterface StackBlitzDependencies {\n    [packageName: string]: string;\n}\n\n/**\n *\n * Given an existing stackblitz containing a few placeholders, it modifies that stackblitz adding a new component\n * to app.component.html and its module to app.module.ts\n *\n * import { NgModule } from \"@angular/core\";\n * import { BrowserModule } from \"@angular/platform-browser\";\n * import { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\n * import { FormsModule } from \"@angular/forms\";\n * import { ClarityModule } from \"@clr/angular\";\n * import { AppComponent } from \"./app.component\";\n * //__EXAMPLE_MODULE_IMPORT_LINE;\n *\n * @NgModule({\n *   imports: [\n *     BrowserModule,\n *     BrowserAnimationsModule,\n *     ClarityModule,\n *     FormsModule,\n *     //__EXAMPLE_NG_MODULE_IMPORTS_ENTRY\n *   ],\n *   declarations: [AppComponent],\n *   bootstrap: [AppComponent]\n * })\n * export class AppModule {}\n */\n\nexport class StackBlitzWriterService {\n    constructor(\n        @Inject(STACKBLITZ_INFO) private stackBlitzInfo: StackBlitzInfo,\n        private docRetriever: DocumentationRetrieverService\n    ) {\n        // Temporary until VDCUCC-75\n        // this.fetchSbTemplate();\n    }\n\n    private template: [StackBlitzFileSystem, StackBlitzDependencies] = null;\n\n    /**\n     * @param entry The example to be displayed in StackBlitz\n     */\n    async openStackBlitz(entry: ExampleEntry): Promise<void> {\n        const exampleComponent = this.docRetriever.getComponent(entry.component);\n        let exampleModule: CompodocModule;\n        if (this.stackBlitzInfo.moduleFinder) {\n            const moduleName = this.stackBlitzInfo.moduleFinder(exampleComponent.name);\n            exampleModule = this.docRetriever.getModule(moduleName);\n        }\n\n        const [templateFiles, dependencies] = await this.fetchSbTemplate();\n        const [mergedFiles, openFile] = this.createPatch(templateFiles, exampleComponent, exampleModule);\n\n        const project: Project = {\n            title: this.stackBlitzInfo.templateId,\n            description: entry.title,\n            template: 'angular-cli',\n            dependencies,\n            files: mergedFiles,\n        };\n        const openOptions: OpenOptions = {\n            openFile,\n            newWindow: true,\n        };\n        return sdk.openProject(project, openOptions);\n    }\n\n    private createPatch(\n        templateFs: StackBlitzFileSystem,\n        exampleComponent: CompodocComponent,\n        module?: CompodocModule\n    ): [StackBlitzFileSystem, string] {\n        const componentTsFile = this.getFileName(exampleComponent.file);\n        const changedFiles = {\n            [APP_MODULE]: this.mergeAppModule(module, templateFs),\n            [APP_COMPONENT_HTML]: this.mergeAppHtml(exampleComponent, templateFs),\n            [componentTsFile]: exampleComponent.sourceCode,\n            [this.getFileName(module.path)]: module.sourceCode,\n        };\n\n        let defaultFile = componentTsFile;\n\n        if (exampleComponent.templateUrl && exampleComponent.templateUrl.length > 0) {\n            const fileName = removeLeadingDotSlash(exampleComponent.templateUrl[0]);\n            const htmlFile = this.getFileName(fileName);\n            changedFiles[htmlFile] = exampleComponent.templateData;\n            // If HTML is provided, use that as the default file\n            defaultFile = htmlFile;\n        }\n\n        if (exampleComponent.styleUrlsData && exampleComponent.styleUrlsData.length > 0) {\n            const styleData = exampleComponent.styleUrlsData[0];\n            const fileName = removeLeadingDotSlash(styleData.styleUrl);\n            changedFiles[this.getFileName(fileName)] = styleData.data;\n        }\n\n        const mergedFs = { ...templateFs, ...changedFiles };\n\n        return [mergedFs, defaultFile];\n\n        /**\n         * @param fileName a fileName path that may start with ./\n         * @return A filename, without ./ in the front\n         */\n        function removeLeadingDotSlash(fileName: string): string {\n            if (fileName.startsWith('./')) {\n                fileName = fileName.slice(2);\n            }\n            return fileName;\n        }\n    }\n\n    /**\n     * Fetches an existing Stackblitz's files and dependencies by embedding it on the page and removing it when finished.\n     * The result is cached for future calls.\n     */\n    private async fetchSbTemplate(): Promise<[StackBlitzFileSystem, StackBlitzDependencies]> {\n        if (this.template) {\n            return Promise.resolve(this.template);\n        }\n\n        // StackBlitz's API replaces the DOM node you give it, so we need an extra node\n        // so we can remove the created iFRAME\n        const iframeContainer = document.createElement('div');\n        const iframeContainerParent = document.createElement('div');\n        iframeContainerParent.appendChild(iframeContainer);\n        iframeContainerParent.style.visibility = 'hidden';\n        iframeContainerParent.style.position = 'absolute';\n        document.body.appendChild(iframeContainerParent);\n        const vm = await sdk.embedProjectId(iframeContainer, this.stackBlitzInfo.templateId, { view: 'editor' });\n        this.template = [await vm.getFsSnapshot(), await vm.getDependencies()];\n        document.body.removeChild(iframeContainerParent);\n        return Promise.resolve(this.template);\n    }\n\n    /**\n     * Returns just the filename part of a path prefixed by 'src/app/'\n     * @param path Path to be shortened to just its filename and put under src/app\n     * @param prefix A new path to be inserted before the filename\n     */\n    private getFileName(path: string, prefix: string = 'src/app/'): string {\n        return prefix + path.slice(path.lastIndexOf('/') + 1);\n    }\n\n    private mergeAppModule(module: CompodocModule, fileSystem: StackBlitzFileSystem): string {\n        const moduleFileName = this.getFileName(module.path, '').replace(/\\.ts$/, '');\n        const moduleName = module.name;\n        return fileSystem[APP_MODULE].replace(\n            '//__EXAMPLE_MODULE_IMPORT_LINE',\n            `import {${moduleName}} from \"./${moduleFileName}\";`\n        ).replace('//__EXAMPLE_NG_MODULE_IMPORTS_ENTRY', moduleName);\n    }\n\n    private mergeAppHtml(component: CompodocComponent, fileSystem: StackBlitzFileSystem): string {\n        const tag = '<x></x>'.replace(/x/g, component.selector);\n        return fileSystem[APP_COMPONENT_HTML].replace(/__EXAMPLE_TAG/, tag);\n    }\n}\n",
      "properties": [
        {
          "name": "projectName",
          "type": "string",
          "optional": false,
          "description": "<p>The name of the project displaying examples </p>\n",
          "line": 17
        },
        {
          "name": "templateId",
          "type": "string",
          "optional": false,
          "description": "<p>Something like &#39;vcd-ui-cc-starter-clarity-v8-yhe4yg&#39;, then ID of a StackBlitz URL </p>\n",
          "line": 15
        }
      ],
      "indexSignatures": [],
      "kind": 152,
      "methods": [
        {
          "name": "moduleFinder",
          "args": [
            {
              "name": "componentName",
              "type": "string"
            }
          ],
          "optional": true,
          "returnType": "string",
          "typeParameters": [],
          "line": 23,
          "description": "<p>Finds a module for a component\nIf this is null or an empty string is returned, the module is not added to the example</p>\n",
          "jsdoctags": [
            {
              "name": "componentName",
              "type": "string",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "StyleUrlsData",
      "id": "interface-StyleUrlsData-84c359c1e35dbd6f2515de8674e5bdc3",
      "file": "projects/ng-live-docs/src/compodoc/compodoc-schema.ts",
      "type": "interface",
      "sourceCode": "import {ApiParameters} from '../documentation-retriever.service';\n\n/**\n * The root object of the compodoc autogenerated documentation (documentation.json)\n */\nexport interface CompodocSchema {\n    components: CompodocComponent[];\n    modules: CompodocModule[];\n}\n\n/**\n * Component description as defined in the Compodoc generated documentation JSON\n */\nexport interface CompodocComponent {\n    name: string;\n    description: string;\n    sourceCode: string;\n    templateUrl: string[];\n    templateData: string;\n    styleUrls: string[];\n    styleUrlsData: StyleUrlsData[];\n    inputsClass: ApiParameters[];\n    outputsClass: ApiParameters[];\n    file: string;\n    selector: string;\n}\n\nexport interface CompodocModule {\n    /**\n     * Name of the class that has the @NgModule() declaration\n     */\n    name: string;\n    path: string;\n    sourceCode: string;\n    children: {\n        type: string;\n        elements: { name: string }[];\n    }[];\n}\n\nexport interface StyleUrlsData {\n    data: string;\n    styleUrl: string;\n}\n",
      "properties": [
        {
          "name": "data",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 51
        },
        {
          "name": "styleUrl",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 52
        }
      ],
      "indexSignatures": [],
      "kind": 150,
      "methods": []
    }
  ],
  "injectables": [],
  "classes": [
    {
      "name": "CompoDocRetrieverService",
      "id": "class-CompoDocRetrieverService-3bb39493f9d5644660696be86daa7800",
      "file": "projects/ng-live-docs/src/compodoc/compodoc-retriever.service.ts",
      "type": "class",
      "sourceCode": "import { Type } from '@angular/core';\nimport { ApiParameters, DocumentationRetrieverService } from '../documentation-retriever.service';\nimport { CompodocComponent, CompodocModule, CompodocSchema } from './compodoc-schema';\n\n/**\n * This service retrieves specific properties from compodoc generated documentation\n */\nexport class CompoDocRetrieverService implements DocumentationRetrieverService {\n    constructor(private documentationJson: CompodocSchema[]) {}\n\n    public getOverview(component: Type<unknown>): string {\n        return this.getComponent(component).description;\n    }\n\n    public getTypescriptSourceCode(component: Type<unknown>): string {\n        return this.getComponent(component).sourceCode;\n    }\n\n    public getHtmlSourceCode(component: Type<unknown>): string {\n        return this.getComponent(component).templateData;\n    }\n\n    public getCssSourceCode(component: Type<unknown>): string {\n        const styleUrlsData = this.getComponent(component).styleUrlsData;\n        if (!styleUrlsData) {\n            return;\n        }\n        return styleUrlsData.map(styleUrl => styleUrl.data).join('\\n\\n\\n');\n    }\n\n    public getComponent(component: Type<any>): CompodocComponent {\n        for (const documentationJson of this.documentationJson) {\n            const compodocComponent = documentationJson.components.find(c => c.name === component.name);\n            if (compodocComponent) {\n                return compodocComponent;\n            }\n        }\n        return { styleUrlsData: [] } as CompodocComponent;\n    }\n\n    public getModule(moduleName: string): CompodocModule | null {\n        for (const documentationJson of this.documentationJson) {\n            const compodocComponent = documentationJson.modules.find(module => module.name === moduleName);\n            if (compodocComponent) {\n                return compodocComponent;\n            }\n        }\n        return null;\n    }\n\n    public getInputParameters(component: Type<unknown>): ApiParameters[] {\n        const comp = this.getComponent(component);\n        return comp.inputsClass || [];\n    }\n\n    public getOutputParameters(component: Type<unknown>): ApiParameters[] {\n        const comp = this.getComponent(component);\n        return comp.outputsClass || [];\n    }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "documentationJson",
            "type": "CompodocSchema[]"
          }
        ],
        "line": 13,
        "jsdoctags": [
          {
            "name": "documentationJson",
            "type": "CompodocSchema[]",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [],
      "description": "<p>This service retrieves specific properties from compodoc generated documentation</p>\n",
      "rawdescription": "This service retrieves specific properties from compodoc generated documentation",
      "methods": [
        {
          "name": "getComponent",
          "args": [
            {
              "name": "component",
              "type": "Type<any>"
            }
          ],
          "optional": false,
          "returnType": "CompodocComponent",
          "typeParameters": [],
          "line": 36,
          "modifierKind": [
            114
          ],
          "jsdoctags": [
            {
              "name": "component",
              "type": "Type<any>",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getCssSourceCode",
          "args": [
            {
              "name": "component",
              "type": "Type<unknown>"
            }
          ],
          "optional": false,
          "returnType": "string",
          "typeParameters": [],
          "line": 28,
          "modifierKind": [
            114
          ],
          "jsdoctags": [
            {
              "name": "component",
              "type": "Type<unknown>",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getHtmlSourceCode",
          "args": [
            {
              "name": "component",
              "type": "Type<unknown>"
            }
          ],
          "optional": false,
          "returnType": "string",
          "typeParameters": [],
          "line": 24,
          "modifierKind": [
            114
          ],
          "jsdoctags": [
            {
              "name": "component",
              "type": "Type<unknown>",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getInputParameters",
          "args": [
            {
              "name": "component",
              "type": "Type<unknown>"
            }
          ],
          "optional": false,
          "returnType": "ApiParameters[]",
          "typeParameters": [],
          "line": 56,
          "modifierKind": [
            114
          ],
          "jsdoctags": [
            {
              "name": "component",
              "type": "Type<unknown>",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getModule",
          "args": [
            {
              "name": "moduleName",
              "type": "string"
            }
          ],
          "optional": false,
          "returnType": "CompodocModule | null",
          "typeParameters": [],
          "line": 46,
          "modifierKind": [
            114
          ],
          "jsdoctags": [
            {
              "name": "moduleName",
              "type": "string",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getOutputParameters",
          "args": [
            {
              "name": "component",
              "type": "Type<unknown>"
            }
          ],
          "optional": false,
          "returnType": "ApiParameters[]",
          "typeParameters": [],
          "line": 61,
          "modifierKind": [
            114
          ],
          "jsdoctags": [
            {
              "name": "component",
              "type": "Type<unknown>",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getOverview",
          "args": [
            {
              "name": "component",
              "type": "Type<unknown>"
            }
          ],
          "optional": false,
          "returnType": "string",
          "typeParameters": [],
          "line": 16,
          "modifierKind": [
            114
          ],
          "jsdoctags": [
            {
              "name": "component",
              "type": "Type<unknown>",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getTypescriptSourceCode",
          "args": [
            {
              "name": "component",
              "type": "Type<unknown>"
            }
          ],
          "optional": false,
          "returnType": "string",
          "typeParameters": [],
          "line": 20,
          "modifierKind": [
            114
          ],
          "jsdoctags": [
            {
              "name": "component",
              "type": "Type<unknown>",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "implements": [
        "DocumentationRetrieverService"
      ]
    },
    {
      "name": "DocumentationRetrieverService",
      "id": "class-DocumentationRetrieverService-3b59878f74e649afa0ade66873b643a3",
      "file": "projects/ng-live-docs/src/documentation-retriever.service.ts",
      "type": "class",
      "sourceCode": "import {Type} from '@angular/core';\nimport {CompodocComponent, CompodocModule} from './compodoc/compodoc-schema';\n\n/**\n * Represents the inputClass/outputClass properties of a component in compodoc generated documentation\n */\nexport interface ApiParameters {\n    /**\n     * Represents name of input/output property of a component\n     */\n    name: string;\n    /**\n     * Represents Data type of input/output property\n     */\n    type: string;\n    /**\n     * Represents JS doc of input/output property\n     */\n    description: string;\n}\n\n/**\n * Service exposing methods for retrieving the documentation for a given component.\n */\nexport abstract class DocumentationRetrieverService {\n    /**\n     * Returns the overview help documentation for the provided component\n     */\n    public abstract getOverview(component: Type<any>): string;\n\n    /**\n     * Returns the typescript source code for the provided component\n     */\n    public abstract getTypescriptSourceCode(component: Type<any>): string;\n\n    /**\n     * Returns the HTML source code for the provided component\n     */\n    public abstract getHtmlSourceCode(component: Type<any>): string;\n\n    /**\n     * Returns the CSS source code for the provided component\n     */\n    public abstract getCssSourceCode(component: Type<any>): string;\n\n    /**\n     * Returns the inputsClass property value of the provided component from the Compodoc generated JSON\n     */\n    public abstract getInputParameters(component: Type<any>): ApiParameters[];\n\n    /**\n     * Returns the outputsClass property value of the provided component from the Compodoc generated JSON\n     */\n    public abstract getOutputParameters(component: Type<any>): ApiParameters[];\n\n    /** The raw CompoDoc component */\n    public abstract getComponent(component: Type<any>): CompodocComponent;\n\n    /** The raw Compodoc module object */\n    public abstract getModule(moduleName: string): CompodocModule;\n}\n",
      "properties": [],
      "description": "<p>Service exposing methods for retrieving the documentation for a given component.</p>\n",
      "rawdescription": "Service exposing methods for retrieving the documentation for a given component.",
      "methods": [
        {
          "name": "getComponent",
          "args": [
            {
              "name": "component",
              "type": "Type<any>"
            }
          ],
          "optional": false,
          "returnType": "CompodocComponent",
          "typeParameters": [],
          "line": 62,
          "description": "<p>The raw CompoDoc component </p>\n",
          "modifierKind": [
            114,
            117
          ],
          "jsdoctags": [
            {
              "name": "component",
              "type": "Type<any>",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getCssSourceCode",
          "args": [
            {
              "name": "component",
              "type": "Type<any>"
            }
          ],
          "optional": false,
          "returnType": "string",
          "typeParameters": [],
          "line": 49,
          "description": "<p>Returns the CSS source code for the provided component</p>\n",
          "modifierKind": [
            114,
            117
          ],
          "jsdoctags": [
            {
              "name": "component",
              "type": "Type<any>",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getHtmlSourceCode",
          "args": [
            {
              "name": "component",
              "type": "Type<any>"
            }
          ],
          "optional": false,
          "returnType": "string",
          "typeParameters": [],
          "line": 44,
          "description": "<p>Returns the HTML source code for the provided component</p>\n",
          "modifierKind": [
            114,
            117
          ],
          "jsdoctags": [
            {
              "name": "component",
              "type": "Type<any>",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getInputParameters",
          "args": [
            {
              "name": "component",
              "type": "Type<any>"
            }
          ],
          "optional": false,
          "returnType": "ApiParameters[]",
          "typeParameters": [],
          "line": 54,
          "description": "<p>Returns the inputsClass property value of the provided component from the Compodoc generated JSON</p>\n",
          "modifierKind": [
            114,
            117
          ],
          "jsdoctags": [
            {
              "name": "component",
              "type": "Type<any>",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getModule",
          "args": [
            {
              "name": "moduleName",
              "type": "string"
            }
          ],
          "optional": false,
          "returnType": "CompodocModule",
          "typeParameters": [],
          "line": 65,
          "description": "<p>The raw Compodoc module object </p>\n",
          "modifierKind": [
            114,
            117
          ],
          "jsdoctags": [
            {
              "name": "moduleName",
              "type": "string",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getOutputParameters",
          "args": [
            {
              "name": "component",
              "type": "Type<any>"
            }
          ],
          "optional": false,
          "returnType": "ApiParameters[]",
          "typeParameters": [],
          "line": 59,
          "description": "<p>Returns the outputsClass property value of the provided component from the Compodoc generated JSON</p>\n",
          "modifierKind": [
            114,
            117
          ],
          "jsdoctags": [
            {
              "name": "component",
              "type": "Type<any>",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getOverview",
          "args": [
            {
              "name": "component",
              "type": "Type<any>"
            }
          ],
          "optional": false,
          "returnType": "string",
          "typeParameters": [],
          "line": 34,
          "description": "<p>Returns the overview help documentation for the provided component</p>\n",
          "modifierKind": [
            114,
            117
          ],
          "jsdoctags": [
            {
              "name": "component",
              "type": "Type<any>",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getTypescriptSourceCode",
          "args": [
            {
              "name": "component",
              "type": "Type<any>"
            }
          ],
          "optional": false,
          "returnType": "string",
          "typeParameters": [],
          "line": 39,
          "description": "<p>Returns the typescript source code for the provided component</p>\n",
          "modifierKind": [
            114,
            117
          ],
          "jsdoctags": [
            {
              "name": "component",
              "type": "Type<any>",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "indexSignatures": [],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "StackBlitzWriterService",
      "id": "class-StackBlitzWriterService-178598dd0fa2395f5edc62f30b8c513e",
      "file": "projects/ng-live-docs/src/stack-blitz-writer.service.ts",
      "type": "class",
      "sourceCode": "import { Inject, InjectionToken } from '@angular/core';\nimport sdk from '@stackblitz/sdk';\nimport { OpenOptions, Project } from '@stackblitz/sdk/typings/interfaces';\nimport { CompodocComponent, CompodocModule } from './compodoc/compodoc-schema';\nimport { ExampleEntry } from './documentation';\nimport { DocumentationRetrieverService } from './documentation-retriever.service';\n\nexport interface StackBlitzInfo {\n    /** Something like 'vcd-ui-cc-starter-clarity-v8-yhe4yg', then ID of a StackBlitz URL */\n    templateId: string;\n    /** The name of the project displaying examples */\n    projectName: string;\n\n    /**\n     * Finds a module for a component\n     * If this is null or an empty string is returned, the module is not added to the example\n     */\n    moduleFinder?(componentName: string): string;\n}\n\nexport const STACKBLITZ_INFO = new InjectionToken<StackBlitzInfo>('StackBlitz Template information');\n\nconst APP_MODULE = 'src/app/app.module.ts';\nconst APP_COMPONENT_HTML = 'src/app/app.component.html';\n\n/**\n * Map of file names to their content\n */\ninterface StackBlitzFileSystem {\n    [filePath: string]: string;\n}\n\n/**\n * Map of package name to version numbers\n */\ninterface StackBlitzDependencies {\n    [packageName: string]: string;\n}\n\n/**\n *\n * Given an existing stackblitz containing a few placeholders, it modifies that stackblitz adding a new component\n * to app.component.html and its module to app.module.ts\n *\n * import { NgModule } from \"@angular/core\";\n * import { BrowserModule } from \"@angular/platform-browser\";\n * import { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\n * import { FormsModule } from \"@angular/forms\";\n * import { ClarityModule } from \"@clr/angular\";\n * import { AppComponent } from \"./app.component\";\n * //__EXAMPLE_MODULE_IMPORT_LINE;\n *\n * @NgModule({\n *   imports: [\n *     BrowserModule,\n *     BrowserAnimationsModule,\n *     ClarityModule,\n *     FormsModule,\n *     //__EXAMPLE_NG_MODULE_IMPORTS_ENTRY\n *   ],\n *   declarations: [AppComponent],\n *   bootstrap: [AppComponent]\n * })\n * export class AppModule {}\n */\n\nexport class StackBlitzWriterService {\n    constructor(\n        @Inject(STACKBLITZ_INFO) private stackBlitzInfo: StackBlitzInfo,\n        private docRetriever: DocumentationRetrieverService\n    ) {\n        // Temporary until VDCUCC-75\n        // this.fetchSbTemplate();\n    }\n\n    private template: [StackBlitzFileSystem, StackBlitzDependencies] = null;\n\n    /**\n     * @param entry The example to be displayed in StackBlitz\n     */\n    async openStackBlitz(entry: ExampleEntry): Promise<void> {\n        const exampleComponent = this.docRetriever.getComponent(entry.component);\n        let exampleModule: CompodocModule;\n        if (this.stackBlitzInfo.moduleFinder) {\n            const moduleName = this.stackBlitzInfo.moduleFinder(exampleComponent.name);\n            exampleModule = this.docRetriever.getModule(moduleName);\n        }\n\n        const [templateFiles, dependencies] = await this.fetchSbTemplate();\n        const [mergedFiles, openFile] = this.createPatch(templateFiles, exampleComponent, exampleModule);\n\n        const project: Project = {\n            title: this.stackBlitzInfo.templateId,\n            description: entry.title,\n            template: 'angular-cli',\n            dependencies,\n            files: mergedFiles,\n        };\n        const openOptions: OpenOptions = {\n            openFile,\n            newWindow: true,\n        };\n        return sdk.openProject(project, openOptions);\n    }\n\n    private createPatch(\n        templateFs: StackBlitzFileSystem,\n        exampleComponent: CompodocComponent,\n        module?: CompodocModule\n    ): [StackBlitzFileSystem, string] {\n        const componentTsFile = this.getFileName(exampleComponent.file);\n        const changedFiles = {\n            [APP_MODULE]: this.mergeAppModule(module, templateFs),\n            [APP_COMPONENT_HTML]: this.mergeAppHtml(exampleComponent, templateFs),\n            [componentTsFile]: exampleComponent.sourceCode,\n            [this.getFileName(module.path)]: module.sourceCode,\n        };\n\n        let defaultFile = componentTsFile;\n\n        if (exampleComponent.templateUrl && exampleComponent.templateUrl.length > 0) {\n            const fileName = removeLeadingDotSlash(exampleComponent.templateUrl[0]);\n            const htmlFile = this.getFileName(fileName);\n            changedFiles[htmlFile] = exampleComponent.templateData;\n            // If HTML is provided, use that as the default file\n            defaultFile = htmlFile;\n        }\n\n        if (exampleComponent.styleUrlsData && exampleComponent.styleUrlsData.length > 0) {\n            const styleData = exampleComponent.styleUrlsData[0];\n            const fileName = removeLeadingDotSlash(styleData.styleUrl);\n            changedFiles[this.getFileName(fileName)] = styleData.data;\n        }\n\n        const mergedFs = { ...templateFs, ...changedFiles };\n\n        return [mergedFs, defaultFile];\n\n        /**\n         * @param fileName a fileName path that may start with ./\n         * @return A filename, without ./ in the front\n         */\n        function removeLeadingDotSlash(fileName: string): string {\n            if (fileName.startsWith('./')) {\n                fileName = fileName.slice(2);\n            }\n            return fileName;\n        }\n    }\n\n    /**\n     * Fetches an existing Stackblitz's files and dependencies by embedding it on the page and removing it when finished.\n     * The result is cached for future calls.\n     */\n    private async fetchSbTemplate(): Promise<[StackBlitzFileSystem, StackBlitzDependencies]> {\n        if (this.template) {\n            return Promise.resolve(this.template);\n        }\n\n        // StackBlitz's API replaces the DOM node you give it, so we need an extra node\n        // so we can remove the created iFRAME\n        const iframeContainer = document.createElement('div');\n        const iframeContainerParent = document.createElement('div');\n        iframeContainerParent.appendChild(iframeContainer);\n        iframeContainerParent.style.visibility = 'hidden';\n        iframeContainerParent.style.position = 'absolute';\n        document.body.appendChild(iframeContainerParent);\n        const vm = await sdk.embedProjectId(iframeContainer, this.stackBlitzInfo.templateId, { view: 'editor' });\n        this.template = [await vm.getFsSnapshot(), await vm.getDependencies()];\n        document.body.removeChild(iframeContainerParent);\n        return Promise.resolve(this.template);\n    }\n\n    /**\n     * Returns just the filename part of a path prefixed by 'src/app/'\n     * @param path Path to be shortened to just its filename and put under src/app\n     * @param prefix A new path to be inserted before the filename\n     */\n    private getFileName(path: string, prefix: string = 'src/app/'): string {\n        return prefix + path.slice(path.lastIndexOf('/') + 1);\n    }\n\n    private mergeAppModule(module: CompodocModule, fileSystem: StackBlitzFileSystem): string {\n        const moduleFileName = this.getFileName(module.path, '').replace(/\\.ts$/, '');\n        const moduleName = module.name;\n        return fileSystem[APP_MODULE].replace(\n            '//__EXAMPLE_MODULE_IMPORT_LINE',\n            `import {${moduleName}} from \"./${moduleFileName}\";`\n        ).replace('//__EXAMPLE_NG_MODULE_IMPORTS_ENTRY', moduleName);\n    }\n\n    private mergeAppHtml(component: CompodocComponent, fileSystem: StackBlitzFileSystem): string {\n        const tag = '<x></x>'.replace(/x/g, component.selector);\n        return fileSystem[APP_COMPONENT_HTML].replace(/__EXAMPLE_TAG/, tag);\n    }\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "stackBlitzInfo",
            "type": "StackBlitzInfo"
          },
          {
            "name": "docRetriever",
            "type": "DocumentationRetrieverService"
          }
        ],
        "line": 72,
        "jsdoctags": [
          {
            "name": "stackBlitzInfo",
            "type": "StackBlitzInfo",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "docRetriever",
            "type": "DocumentationRetrieverService",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "properties": [
        {
          "name": "template",
          "defaultValue": "null",
          "type": "[StackBlitzFileSystem, StackBlitzDependencies]",
          "optional": false,
          "description": "",
          "line": 81,
          "modifierKind": [
            112
          ]
        }
      ],
      "description": "<p>Given an existing stackblitz containing a few placeholders, it modifies that stackblitz adding a new component\nto app.component.html and its module to app.module.ts</p>\n<p>import { NgModule } from &quot;@angular/core&quot;;\nimport { BrowserModule } from &quot;@angular/platform-browser&quot;;\nimport { BrowserAnimationsModule } from &quot;@angular/platform-browser/animations&quot;;\nimport { FormsModule } from &quot;@angular/forms&quot;;\nimport { ClarityModule } from &quot;@clr/angular&quot;;\nimport { AppComponent } from &quot;./app.component&quot;;\n//__EXAMPLE_MODULE_IMPORT_LINE;</p>\n",
      "rawdescription": "Given an existing stackblitz containing a few placeholders, it modifies that stackblitz adding a new component\nto app.component.html and its module to app.module.ts\n\nimport { NgModule } from \"@angular/core\";\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\nimport { FormsModule } from \"@angular/forms\";\nimport { ClarityModule } from \"@clr/angular\";\nimport { AppComponent } from \"./app.component\";\n//__EXAMPLE_MODULE_IMPORT_LINE;",
      "methods": [
        {
          "name": "createPatch",
          "args": [
            {
              "name": "templateFs",
              "type": "StackBlitzFileSystem"
            },
            {
              "name": "exampleComponent",
              "type": "CompodocComponent"
            },
            {
              "name": "module",
              "type": "CompodocModule",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "",
          "typeParameters": [],
          "line": 111,
          "modifierKind": [
            112
          ],
          "jsdoctags": [
            {
              "name": "templateFs",
              "type": "StackBlitzFileSystem",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "exampleComponent",
              "type": "CompodocComponent",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "module",
              "type": "CompodocModule",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "fetchSbTemplate",
          "args": [],
          "optional": false,
          "returnType": "Promise<>",
          "typeParameters": [],
          "line": 160,
          "description": "<p>Fetches an existing Stackblitz&#39;s files and dependencies by embedding it on the page and removing it when finished.\nThe result is cached for future calls.</p>\n",
          "modifierKind": [
            112,
            120
          ]
        },
        {
          "name": "getFileName",
          "args": [
            {
              "name": "path",
              "type": "string"
            },
            {
              "name": "prefix",
              "type": "string",
              "defaultValue": "'src/app/'"
            }
          ],
          "optional": false,
          "returnType": "string",
          "typeParameters": [],
          "line": 184,
          "description": "<p>Returns just the filename part of a path prefixed by &#39;src/app/&#39;</p>\n",
          "modifierKind": [
            112
          ],
          "jsdoctags": [
            {
              "name": {
                "pos": 6666,
                "end": 6670,
                "flags": 0,
                "escapedText": "path"
              },
              "type": "string",
              "tagName": {
                "pos": 6660,
                "end": 6665,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<p>Path to be shortened to just its filename and put under src/app</p>\n"
            },
            {
              "name": {
                "pos": 6749,
                "end": 6755,
                "flags": 0,
                "escapedText": "prefix"
              },
              "type": "string",
              "defaultValue": "'src/app/'",
              "tagName": {
                "pos": 6743,
                "end": 6748,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<p>A new path to be inserted before the filename</p>\n"
            }
          ]
        },
        {
          "name": "mergeAppHtml",
          "args": [
            {
              "name": "component",
              "type": "CompodocComponent"
            },
            {
              "name": "fileSystem",
              "type": "StackBlitzFileSystem"
            }
          ],
          "optional": false,
          "returnType": "string",
          "typeParameters": [],
          "line": 197,
          "modifierKind": [
            112
          ],
          "jsdoctags": [
            {
              "name": "component",
              "type": "CompodocComponent",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "fileSystem",
              "type": "StackBlitzFileSystem",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "mergeAppModule",
          "args": [
            {
              "name": "module",
              "type": "CompodocModule"
            },
            {
              "name": "fileSystem",
              "type": "StackBlitzFileSystem"
            }
          ],
          "optional": false,
          "returnType": "string",
          "typeParameters": [],
          "line": 188,
          "modifierKind": [
            112
          ],
          "jsdoctags": [
            {
              "name": "module",
              "type": "CompodocModule",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "fileSystem",
              "type": "StackBlitzFileSystem",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "openStackBlitz",
          "args": [
            {
              "name": "entry",
              "type": "ExampleEntry"
            }
          ],
          "optional": false,
          "returnType": "Promise<void>",
          "typeParameters": [],
          "line": 86,
          "description": "",
          "modifierKind": [
            120
          ],
          "jsdoctags": [
            {
              "name": {
                "pos": 2552,
                "end": 2557,
                "flags": 0,
                "escapedText": "entry"
              },
              "type": "ExampleEntry",
              "tagName": {
                "pos": 2546,
                "end": 2551,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<p>The example to be displayed in StackBlitz</p>\n"
            }
          ]
        }
      ],
      "indexSignatures": [],
      "jsdoctags": [
        {
          "pos": 1895,
          "end": 1904,
          "flags": 0,
          "kind": 288,
          "atToken": {
            "pos": 1895,
            "end": 1896,
            "flags": 0,
            "kind": 57
          },
          "tagName": {
            "pos": 1896,
            "end": 1904,
            "flags": 0,
            "escapedText": "NgModule"
          },
          "comment": "({\nimports: [\nBrowserModule,\nBrowserAnimationsModule,\nClarityModule,\nFormsModule,\n//__EXAMPLE_NG_MODULE_IMPORTS_ENTRY\n],\ndeclarations: [AppComponent],\nbootstrap: [AppComponent]\n})\nexport class AppModule {}"
        }
      ],
      "inputsClass": [],
      "outputsClass": [],
      "hostBindings": [],
      "hostListeners": []
    }
  ],
  "directives": [],
  "components": [
    {
      "name": "ApiViewerComponent",
      "id": "component-ApiViewerComponent-10557da4aeea3230795c14adc3f5a3d0",
      "file": "projects/ng-live-docs/src/api-viewer/api-viewer.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": " vmw-api-viewer",
      "styleUrls": [
        "./api-viewer.component.scss"
      ],
      "styles": [],
      "templateUrl": [
        "./api-viewer.component.html"
      ],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "component",
          "description": "<p>Gets the input and output parameters from the Compodoc generated documentation json</p>\n",
          "line": 24,
          "type": ""
        }
      ],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "inputParameters",
          "type": "ApiParameters[]",
          "optional": false,
          "description": "",
          "line": 15
        },
        {
          "name": "outputParameters",
          "type": "ApiParameters[]",
          "optional": false,
          "description": "",
          "line": 16
        }
      ],
      "methodsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode": "import {Component, Input, Type} from '@angular/core';\nimport {ApiParameters, DocumentationRetrieverService} from '../documentation-retriever.service';\n\n@Component({\n    selector: ' vmw-api-viewer',\n    templateUrl: './api-viewer.component.html',\n    styleUrls: ['./api-viewer.component.scss'],\n})\nexport class ApiViewerComponent {\n    inputParameters: ApiParameters[];\n    outputParameters: ApiParameters[];\n\n    constructor(private documentationRetriever: DocumentationRetrieverService) {}\n\n    /**\n     * Gets the input and output parameters from the Compodoc generated documentation json\n     */\n    @Input()\n    set component(component: Type<any>) {\n        if (!component) {\n            return;\n        }\n        this.inputParameters = this.documentationRetriever.getInputParameters(component);\n        this.outputParameters = this.documentationRetriever.getOutputParameters(component);\n    }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "::ng-deep body p {\n    margin-top: 0;\n}\n",
          "styleUrl": "./api-viewer.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "documentationRetriever",
            "type": "DocumentationRetrieverService"
          }
        ],
        "line": 16,
        "jsdoctags": [
          {
            "name": "documentationRetriever",
            "type": "DocumentationRetrieverService",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "accessors": {
        "component": {
          "name": "component",
          "setSignature": {
            "name": "component",
            "type": "void",
            "args": [
              {
                "name": "component",
                "type": ""
              }
            ],
            "returnType": "void",
            "line": 24,
            "description": "<p>Gets the input and output parameters from the Compodoc generated documentation json</p>\n",
            "jsdoctags": [
              {
                "name": "component",
                "type": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        }
      },
      "templateData": "<h6>Inputs</h6>\n<table class=\"table\" *ngIf=\"inputParameters?.length\">\n    <thead>\n        <tr>\n            <th class=\"left\">Name</th>\n            <th>Type</th>\n            <th class=\"left\">Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr *ngFor=\"let par of inputParameters\">\n            <td class=\"left\">\n                <p>{{ par.name }}</p>\n            </td>\n            <td>{{ par.type }}</td>\n            <td class=\"left\"><div [innerHTML]=\"par.description\"></div></td>\n        </tr>\n    </tbody>\n</table>\n<p *ngIf=\"!inputParameters?.length\">The component has no input parameters</p>\n\n<h6>Outputs</h6>\n<table class=\"table\" *ngIf=\"outputParameters?.length\">\n    <thead>\n        <tr>\n            <th class=\"left\">Name</th>\n            <th>Type</th>\n            <th class=\"left\">Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr *ngFor=\"let par of outputParameters\">\n            <td class=\"left\">\n                <p>{{ par.name }}</p>\n            </td>\n            <td>{{ par.type }}</td>\n            <td class=\"left\"><div [innerHTML]=\"par.description\"></div></td>\n        </tr>\n    </tbody>\n</table>\n<p *ngIf=\"!outputParameters?.length\">The component does not emit any values</p>\n"
    },
    {
      "name": "DocumentationContainerComponent",
      "id": "component-DocumentationContainerComponent-d77fe6013e1b18ceb623f622a01669be",
      "file": "projects/ng-live-docs/src/documentation-container/documentation-container.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "vmw-documentation-container",
      "styleUrls": [
        "./documentation-container.component.scss"
      ],
      "styles": [],
      "templateUrl": [
        "./documentation-container.component.html"
      ],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "documentationEntry",
          "type": "DocumentationEntry",
          "optional": false,
          "description": "<p>The documentation entry registered for a component is obtained here using the route data\n{@link Documentation.getRoutes} registered for that component using {@link Documentation.registerDocumentationEntry}</p>\n",
          "line": 20
        }
      ],
      "methodsClass": [
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 24
        }
      ],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode": "import {Component, OnInit} from '@angular/core';\nimport {ActivatedRoute, Data} from '@angular/router';\nimport {DocumentationEntry} from '../documentation';\n\n@Component({\n    selector: 'vmw-documentation-container',\n    templateUrl: './documentation-container.component.html',\n    styleUrls: ['./documentation-container.component.scss'],\n})\nexport class DocumentationContainerComponent implements OnInit {\n    /**\n     * The documentation entry registered for a component is obtained here using the route data\n     * {@link Documentation.getRoutes} registered for that component using {@link Documentation.registerDocumentationEntry}\n     */\n    documentationEntry: DocumentationEntry;\n\n    constructor(private route: ActivatedRoute) {}\n\n    ngOnInit(): void {\n        this.route.data.subscribe((data: Data) => {\n            this.documentationEntry = data.documentationEntry;\n        });\n    }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "vcd-example-viewer {\n    margin-top: 1rem;\n    display: block;\n}\n",
          "styleUrl": "./documentation-container.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "route",
            "type": "ActivatedRoute"
          }
        ],
        "line": 20,
        "jsdoctags": [
          {
            "name": "route",
            "type": "ActivatedRoute",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": [
        "OnInit"
      ],
      "templateData": "<clr-tabs>\n    <clr-tab>\n        <button clrTabLink>Documentation</button>\n        <clr-tab-content>\n            <vmw-overview-viewer [component]=\"documentationEntry?.component\"> </vmw-overview-viewer>\n        </clr-tab-content>\n    </clr-tab>\n\n    <clr-tab>\n        <button clrTabLink>API</button>\n        <clr-tab-content>\n            <vmw-api-viewer [component]=\"documentationEntry?.component\"> </vmw-api-viewer>\n        </clr-tab-content>\n    </clr-tab>\n\n    <clr-tab>\n        <button clrTabLink>Examples</button>\n        <clr-tab-content>\n            <vmw-example-viewer\n                *ngFor=\"let exampleDescriptor of documentationEntry?.examples\"\n                [exampleEntry]=\"exampleDescriptor\"\n            >\n            </vmw-example-viewer>\n        </clr-tab-content>\n    </clr-tab>\n</clr-tabs>\n"
    },
    {
      "name": "ExampleViewerComponent",
      "id": "component-ExampleViewerComponent-31e6f1fc130d4b55bbf7ec3effe0e311",
      "file": "projects/ng-live-docs/src/example-viewer/example-viewer.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "vmw-example-viewer",
      "styleUrls": [
        "./example-viewer.component.scss"
      ],
      "styles": [],
      "templateUrl": [
        "./example-viewer.component.html"
      ],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "exampleEntry",
          "line": 37,
          "type": ""
        }
      ],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "_exampleEntry",
          "type": "ExampleEntry",
          "optional": false,
          "description": "<p>Gets the example entry from documentation entry and renders the example component</p>\n",
          "line": 35,
          "modifierKind": [
            112
          ]
        },
        {
          "name": "exampleContainer",
          "type": "ViewContainerRef",
          "optional": false,
          "description": "<p>Container for rendering the example component</p>\n",
          "line": 50,
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'exampleContainer', {static: true, read: ViewContainerRef}"
            }
          ]
        },
        {
          "name": "showSourceCode",
          "defaultValue": "false",
          "type": "",
          "optional": false,
          "description": "<p>For showing and hiding of {@link SourceCodeViewerComponent} in the HTML</p>\n",
          "line": 20
        }
      ],
      "methodsClass": [
        {
          "name": "createExample",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 52,
          "modifierKind": [
            112
          ]
        },
        {
          "name": "onCodeButtonClick",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 62
        },
        {
          "name": "onRunButtonClick",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 66
        }
      ],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode": "import {Component, ComponentFactoryResolver, Input, ViewChild, ViewContainerRef} from '@angular/core';\nimport {ExampleEntry} from '../documentation';\nimport {DocumentationRetrieverService} from '../documentation-retriever.service';\nimport {StackBlitzWriterService} from '../stack-blitz-writer.service';\n\n@Component({\n    selector: 'vmw-example-viewer',\n    templateUrl: './example-viewer.component.html',\n    styleUrls: ['./example-viewer.component.scss'],\n})\nexport class ExampleViewerComponent {\n    /**\n     * For showing and hiding of {@link SourceCodeViewerComponent} in the HTML\n     */\n    showSourceCode = false;\n\n    get sourceCodeButtonText(): string {\n        return this.showSourceCode ? 'Show source code' : 'Hide source code';\n    }\n\n    constructor(\n        private resolver: ComponentFactoryResolver,\n        private docRetriever: DocumentationRetrieverService,\n        private stackblitzWriter: StackBlitzWriterService\n    ) {}\n\n    /**\n     * Gets the example entry from documentation entry and renders the example component\n     */\n    private _exampleEntry: ExampleEntry;\n    @Input()\n    set exampleEntry(exampleEntry: ExampleEntry) {\n        this._exampleEntry = exampleEntry;\n        this.createExample();\n    }\n\n    get exampleEntry(): ExampleEntry {\n        return this._exampleEntry;\n    }\n\n    /**\n     * Container for rendering the example component\n     */\n    @ViewChild('exampleContainer', { static: true, read: ViewContainerRef })\n    exampleContainer: ViewContainerRef;\n\n    private createExample(): void {\n        this.exampleContainer.clear();\n        const exampleEntry = this.exampleEntry;\n        if (!exampleEntry || !exampleEntry.component) {\n            return;\n        }\n        const factory = this.resolver.resolveComponentFactory(exampleEntry.component);\n        this.exampleContainer.createComponent(factory);\n    }\n\n    onCodeButtonClick(): void {\n        this.showSourceCode = !this.showSourceCode;\n    }\n\n    onRunButtonClick(): void {\n        this.stackblitzWriter.openStackBlitz(this.exampleEntry);\n    }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "$radius: 3px;\n$margin: 0.5rem;\n$bg-clr: #d8e3e9;\n\n.card-header-main {\n    display: flex;\n\n    .card-header {\n        flex: 1;\n    }\n\n    .example-button-container {\n        display: flex;\n        margin: 0.4rem $margin 0 0;\n        padding: 0 4px;\n\n        &.example-shown {\n            border-radius: $radius $radius 0 0;\n            background-color: $bg-clr;\n        }\n        clr-icon {\n            margin: 0 2px;\n            cursor: pointer;\n            align-self: center;\n        }\n    }\n}\n.source-code-container {\n    border-radius: $radius 0 $radius $radius;\n    margin: 0 $margin;\n    background-color: $bg-clr;\n}\n\n",
          "styleUrl": "./example-viewer.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "resolver",
            "type": "ComponentFactoryResolver"
          },
          {
            "name": "docRetriever",
            "type": "DocumentationRetrieverService"
          },
          {
            "name": "stackblitzWriter",
            "type": "StackBlitzWriterService"
          }
        ],
        "line": 24,
        "jsdoctags": [
          {
            "name": "resolver",
            "type": "ComponentFactoryResolver",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "docRetriever",
            "type": "DocumentationRetrieverService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "stackblitzWriter",
            "type": "StackBlitzWriterService",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "accessors": {
        "sourceCodeButtonText": {
          "name": "sourceCodeButtonText",
          "getSignature": {
            "name": "sourceCodeButtonText",
            "type": "string",
            "returnType": "string",
            "line": 22
          }
        },
        "exampleEntry": {
          "name": "exampleEntry",
          "setSignature": {
            "name": "exampleEntry",
            "type": "void",
            "args": [
              {
                "name": "exampleEntry",
                "type": ""
              }
            ],
            "returnType": "void",
            "line": 37,
            "jsdoctags": [
              {
                "name": "exampleEntry",
                "type": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "exampleEntry",
            "type": "",
            "returnType": "ExampleEntry",
            "line": 42
          }
        }
      },
      "templateData": "<div class=\"card\">\n    <div class=\"card-header-main\">\n        <div class=\"card-header\">\n            {{ exampleEntry?.title }}\n        </div>\n\n        <div class=\"example-button-container\" [ngClass]=\"{ 'example-shown': showSourceCode }\">\n            <clr-icon\n                shape=\"play\"\n                size=\"32\"\n                class=\"is-solid\"\n                (click)=\"onRunButtonClick()\"\n                aria-label=\"Edit example on StackBlitz\"\n                title=\"Edit example on StackBlitz\"\n            ></clr-icon>\n            <clr-icon\n                shape=\"code\"\n                size=\"32\"\n                (click)=\"onCodeButtonClick()\"\n                [attr.aria-label]=\"sourceCodeButtonText\"\n                [attr.title]=\"sourceCodeButtonText\"\n            ></clr-icon>\n        </div>\n    </div>\n\n    <div class=\"card-block source-code-container\" *ngIf=\"showSourceCode\">\n        <vmw-source-code-viewer [component]=\"exampleEntry?.component\"> </vmw-source-code-viewer>\n    </div>\n    <div class=\"card-block\">\n        <div class=\"card-text\">\n            <vmw-overview-viewer\n                [isNoOverviewMessageShown]=\"false\"\n                [component]=\"exampleEntry?.component\"\n            ></vmw-overview-viewer>\n            <template #exampleContainer> </template>\n        </div>\n    </div>\n</div>\n"
    },
    {
      "name": "OverviewViewerComponent",
      "id": "component-OverviewViewerComponent-fb6ec6faffa361fab300002807eb1216",
      "file": "projects/ng-live-docs/src/overview-viewer/overview-viewer.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "vmw-overview-viewer",
      "styleUrls": [
        "./overview-viewer.component.scss"
      ],
      "styles": [],
      "templateUrl": [
        "./overview-viewer.component.html"
      ],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "component",
          "line": 24,
          "type": ""
        },
        {
          "name": "isNoOverviewMessageShown",
          "defaultValue": "true",
          "line": 21
        }
      ],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "overview",
          "type": "string",
          "optional": false,
          "description": "<p>The description of the component from Compodoc generated JSON. This is an HTML encoded string.</p>\n",
          "line": 18
        }
      ],
      "methodsClass": [],
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "",
      "type": "component",
      "sourceCode": "import {Component, Input, Type} from '@angular/core';\nimport {DocumentationRetrieverService} from '../documentation-retriever.service';\n\n@Component({\n    selector: 'vmw-overview-viewer',\n    templateUrl: './overview-viewer.component.html',\n    styleUrls: ['./overview-viewer.component.scss'],\n})\nexport class OverviewViewerComponent {\n    /**\n     * The description of the component from Compodoc generated JSON. This is an HTML encoded string.\n     */\n    overview: string;\n    constructor(private documentationRetriever: DocumentationRetrieverService) {}\n\n    @Input() isNoOverviewMessageShown = true;\n\n    @Input()\n    set component(component: Type<any>) {\n        if (!component) {\n            return;\n        }\n        // TODO: externalize string literals\n        this.overview =\n            this.documentationRetriever.getOverview(component) ||\n            (this.isNoOverviewMessageShown ? 'No Documentation found' : '');\n    }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ":host > div {\n    padding-top: 10px;\n}\n\n:host ::ng-deep p {\n    margin-bottom: 10px;\n}\n",
          "styleUrl": "./overview-viewer.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "documentationRetriever",
            "type": "DocumentationRetrieverService"
          }
        ],
        "line": 18,
        "jsdoctags": [
          {
            "name": "documentationRetriever",
            "type": "DocumentationRetrieverService",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "accessors": {
        "component": {
          "name": "component",
          "setSignature": {
            "name": "component",
            "type": "void",
            "args": [
              {
                "name": "component",
                "type": ""
              }
            ],
            "returnType": "void",
            "line": 24,
            "jsdoctags": [
              {
                "name": "component",
                "type": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        }
      },
      "templateData": "<div [innerHTML]=\"overview\"></div>\n"
    },
    {
      "name": "SourceCodeViewerComponent",
      "id": "component-SourceCodeViewerComponent-7641732daebb301ff289f5878b7736f8",
      "file": "projects/ng-live-docs/src/source-code-viewer/source-code-viewer.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "vmw-source-code-viewer",
      "styleUrls": [],
      "styles": [],
      "template": "",
      "templateUrl": [],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "component",
          "description": "<p>The component whose typescript, html, css will be displayed</p>\n",
          "line": 29,
          "type": ""
        }
      ],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "tabbedCodeViewer",
          "type": "TabbedCodeViewer",
          "optional": false,
          "description": "",
          "line": 23,
          "modifierKind": [
            112
          ]
        }
      ],
      "methodsClass": [
        {
          "name": "ngOnDestroy",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 56
        }
      ],
      "hostBindings": [],
      "hostListeners": [],
      "description": "<p>To display the 3 code parts(TypeScript, HTML and CSS) of a component</p>\n",
      "rawdescription": "To display the 3 code parts(TypeScript, HTML and CSS) of a component",
      "type": "component",
      "sourceCode": "import { Component, ElementRef, Input, OnDestroy, Type } from '@angular/core';\nimport { TabbedCodeViewer } from '@vmw/plain-js-live-docs';\nimport Prism from 'prismjs';\nimport 'prismjs/components/prism-scss';\nimport 'prismjs/components/prism-typescript';\nimport { DocumentationRetrieverService } from '../documentation-retriever.service';\n\n/**\n * To display the 3 code parts(TypeScript, HTML and CSS) of a component\n */\n@Component({\n    selector: 'vmw-source-code-viewer',\n    template: '',\n})\nexport class SourceCodeViewerComponent implements OnDestroy {\n    constructor(private documentationRetriever: DocumentationRetrieverService, private el: ElementRef) {}\n\n    private tabbedCodeViewer: TabbedCodeViewer;\n\n    /**\n     * The component whose typescript, html, css will be displayed\n     */\n    @Input()\n    set component(component: Type<unknown>) {\n        if (!component) {\n            return;\n        }\n\n        this.tabbedCodeViewer = new TabbedCodeViewer(\n            [\n                {\n                    language: 'HTML',\n                    sourceCode: this.documentationRetriever.getHtmlSourceCode(component),\n                    languageId: Prism.languages.html,\n                },\n                {\n                    language: 'TypeScript',\n                    sourceCode: this.documentationRetriever.getTypescriptSourceCode(component),\n                    languageId: Prism.languages.typescript,\n                },\n                {\n                    language: 'SCSS',\n                    sourceCode: this.documentationRetriever.getCssSourceCode(component),\n                    languageId: Prism.languages.scss,\n                },\n            ].filter(code => code.sourceCode)\n        );\n        this.tabbedCodeViewer.render(this.el.nativeElement);\n    }\n\n    ngOnDestroy(): void {\n        this.tabbedCodeViewer.destroy();\n    }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "args": [
          {
            "name": "documentationRetriever",
            "type": "DocumentationRetrieverService"
          },
          {
            "name": "el",
            "type": "ElementRef"
          }
        ],
        "line": 20,
        "jsdoctags": [
          {
            "name": "documentationRetriever",
            "type": "DocumentationRetrieverService",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "el",
            "type": "ElementRef",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "implements": [
        "OnDestroy"
      ],
      "accessors": {
        "component": {
          "name": "component",
          "setSignature": {
            "name": "component",
            "type": "void",
            "args": [
              {
                "name": "component",
                "type": ""
              }
            ],
            "returnType": "void",
            "line": 29,
            "description": "<p>The component whose typescript, html, css will be displayed</p>\n",
            "jsdoctags": [
              {
                "name": "component",
                "type": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        }
      }
    }
  ],
  "modules": [
    {
      "name": "ApiViewerModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": []
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": []
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ],
      "className": "ApiViewerModule",
      "path": "/Users/psimhadri/Desktop/vmware-opensource/live-docs/projects/ng-live-docs/src/api-viewer/api-viewer.module.ts",
      "sourceCode": "/*!\n * Copyright 2020 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ClarityModule } from '@clr/angular';\nimport { ApiViewerComponent } from './api-viewer.component';\n\nconst declarations = [ApiViewerComponent];\n\n@NgModule({\n    imports: [ClarityModule, CommonModule],\n    declarations: [...declarations],\n    exports: [...declarations],\n})\nexport class ApiViewerModule {}\n"
    },
    {
      "name": "DocumentationContainerModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": []
        },
        {
          "type": "imports",
          "elements": [
            {
              "name": "ApiViewerModule"
            },
            {
              "name": "ExampleViewerModule"
            },
            {
              "name": "OverviewViewerModule"
            }
          ]
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "ApiViewerModule"
            },
            {
              "name": "ExampleViewerModule"
            },
            {
              "name": "OverviewViewerModule"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ],
      "className": "DocumentationContainerModule",
      "path": "/Users/psimhadri/Desktop/vmware-opensource/live-docs/projects/ng-live-docs/src/documentation-container/documentation-container.module.ts",
      "sourceCode": "/*!\n * Copyright 2020 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ClarityModule } from '@clr/angular';\nimport { ApiViewerModule } from '../api-viewer/api-viewer.module';\nimport { ExampleViewerModule } from '../example-viewer/example-viewer.module';\nimport { OverviewViewerModule } from '../overview-viewer/overview-viewer.module';\nimport { DocumentationContainerComponent } from './documentation-container.component';\n\nconst declarations = [DocumentationContainerComponent];\n\n@NgModule({\n    imports: [ClarityModule, CommonModule, OverviewViewerModule, ApiViewerModule, ExampleViewerModule],\n    declarations: [...declarations],\n    entryComponents: [DocumentationContainerComponent],\n    exports: [...declarations, OverviewViewerModule, ApiViewerModule, ExampleViewerModule],\n})\nexport class DocumentationContainerModule {}\n"
    },
    {
      "name": "ExampleViewerModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": []
        },
        {
          "type": "imports",
          "elements": [
            {
              "name": "OverviewViewerModule"
            },
            {
              "name": "SourceCodeViewerModule"
            }
          ]
        },
        {
          "type": "exports",
          "elements": []
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ],
      "className": "ExampleViewerModule",
      "path": "/Users/psimhadri/Desktop/vmware-opensource/live-docs/projects/ng-live-docs/src/example-viewer/example-viewer.module.ts",
      "sourceCode": "/*!\n * Copyright 2020 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ClarityModule } from '@clr/angular';\nimport { OverviewViewerModule } from '../overview-viewer/overview-viewer.module';\nimport { SourceCodeViewerModule } from '../source-code-viewer/source-code-viewer.module';\nimport { ExampleViewerComponent } from './example-viewer.component';\n\nconst declarations = [ExampleViewerComponent];\n\n@NgModule({\n    imports: [ClarityModule, CommonModule, SourceCodeViewerModule, OverviewViewerModule],\n    declarations: [...declarations],\n    exports: [...declarations],\n})\nexport class ExampleViewerModule {}\n"
    },
    {
      "name": "NgLiveDocsModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": []
        },
        {
          "type": "imports",
          "elements": [
            {
              "name": "DocumentationContainerModule"
            }
          ]
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "DocumentationContainerModule"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ],
      "className": "NgLiveDocsModule",
      "path": "/Users/psimhadri/Desktop/vmware-opensource/live-docs/projects/ng-live-docs/src/ng-live-docs.module.ts",
      "sourceCode": "/*!\n * Copyright 2020 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { InjectionToken, ModuleWithProviders, NgModule } from '@angular/core';\nimport { CompoDocRetrieverService } from './compodoc/compodoc-retriever.service';\nimport { CompodocSchema } from './compodoc/compodoc-schema';\nimport { DocumentationContainerModule } from './documentation-container/documentation-container.module';\nimport { DocumentationRetrieverService } from './documentation-retriever.service';\nimport { STACKBLITZ_INFO, StackBlitzInfo, StackBlitzWriterService } from './stack-blitz-writer.service';\n\nconst declarations = [];\n\n/**\n * NOTE: The following two has to be exported otherwise the AoT compiler won't see it.\n */\n\n/**\n * Token that makes the documentation JSONs available to the following factory function.\n */\nexport const DOCUMENTATION_DATA = new InjectionToken<CompodocSchema[]>(\n    'NgLiveDocsModule.forRoot() CompoDocRetrieverService doc jsons.'\n);\n\n/**\n * Token that makes Stqckblitz JSON data available to factory functions\n */\nexport const STACKBLITZ_DATA = new InjectionToken<StackBlitzInfo>(\n    'NgLiveDocsModule.forRoot() StackBlitz template JSON data'\n);\n\nexport function getCompoDocRetrieverService(documentations: CompodocSchema[]): DocumentationRetrieverService {\n    return new CompoDocRetrieverService(documentations);\n}\n\nexport function getStackBlitzWriter(\n    sbData: StackBlitzInfo,\n    docRetrieverService: DocumentationRetrieverService\n): StackBlitzWriterService {\n    return new StackBlitzWriterService(sbData, docRetrieverService);\n}\n\n@NgModule({\n    imports: [DocumentationContainerModule],\n    declarations: [...declarations],\n    exports: [...declarations, DocumentationContainerModule]\n})\nexport class NgLiveDocsModule {\n    /**\n     * Called in the host package importing this doc library for providing the documentation JSONs needed for\n     * {@link CompoDocRetrieverService}\n     */\n    public static forRoot(documentations: CompodocSchema[], stackblitzData: StackBlitzInfo): ModuleWithProviders {\n        return {\n            ngModule: NgLiveDocsModule,\n            providers: [\n                // For injecting 'documentations' into factory function, we have to first provide them as injectable.\n                {\n                    provide: DOCUMENTATION_DATA,\n                    useValue: documentations,\n                },\n                {\n                    provide: STACKBLITZ_INFO,\n                    useValue: stackblitzData,\n                },\n                {\n                    provide: DocumentationRetrieverService,\n                    useFactory: getCompoDocRetrieverService,\n                    deps: [DOCUMENTATION_DATA],\n                },\n                {\n                    provide: StackBlitzWriterService,\n                    deps: [STACKBLITZ_INFO, DocumentationRetrieverService],\n                    useFactory: getStackBlitzWriter,\n                },\n            ],\n        };\n    }\n}\n"
    },
    {
      "name": "OverviewViewerModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": []
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": []
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ],
      "className": "OverviewViewerModule",
      "path": "/Users/psimhadri/Desktop/vmware-opensource/live-docs/projects/ng-live-docs/src/overview-viewer/overview-viewer.module.ts",
      "sourceCode": "/*!\n * Copyright 2020 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ClarityModule } from '@clr/angular';\nimport { OverviewViewerComponent } from './overview-viewer.component';\n\nconst declarations = [OverviewViewerComponent];\n\n@NgModule({\n    imports: [ClarityModule, CommonModule],\n    declarations: [...declarations],\n    exports: [...declarations],\n})\nexport class OverviewViewerModule {}\n"
    },
    {
      "name": "SourceCodeViewerModule",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": []
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": []
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ],
      "className": "SourceCodeViewerModule",
      "path": "/Users/psimhadri/Desktop/vmware-opensource/live-docs/projects/ng-live-docs/src/source-code-viewer/source-code-viewer.module.ts",
      "sourceCode": "/*!\n * Copyright 2020 VMware, Inc.\n * SPDX-License-Identifier: BSD-2-Clause\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ClarityModule } from '@clr/angular';\nimport { SourceCodeViewerComponent } from './source-code-viewer.component';\n\nconst declarations = [SourceCodeViewerComponent];\n\n@NgModule({\n    imports: [ClarityModule, CommonModule],\n    declarations: [...declarations],\n    exports: [...declarations],\n})\nexport class SourceCodeViewerModule {}\n"
    }
  ],
  "miscellaneous": {
    "variables": [
      {
        "name": "APP_COMPONENT_HTML",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "projects/ng-live-docs/src/stack-blitz-writer.service.ts",
        "type": "string",
        "defaultValue": "'src/app/app.component.html'"
      },
      {
        "name": "APP_MODULE",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "projects/ng-live-docs/src/stack-blitz-writer.service.ts",
        "type": "string",
        "defaultValue": "'src/app/app.module.ts'"
      },
      {
        "name": "declarations",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "projects/ng-live-docs/src/ng-live-docs.module.ts",
        "type": "[]",
        "defaultValue": "[]"
      },
      {
        "name": "declarations",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "projects/ng-live-docs/src/api-viewer/api-viewer.module.ts",
        "type": "[]",
        "defaultValue": "[ApiViewerComponent]"
      },
      {
        "name": "declarations",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "projects/ng-live-docs/src/documentation-container/documentation-container.module.ts",
        "type": "[]",
        "defaultValue": "[DocumentationContainerComponent]"
      },
      {
        "name": "declarations",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "projects/ng-live-docs/src/example-viewer/example-viewer.module.ts",
        "type": "[]",
        "defaultValue": "[ExampleViewerComponent]"
      },
      {
        "name": "declarations",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "projects/ng-live-docs/src/overview-viewer/overview-viewer.module.ts",
        "type": "[]",
        "defaultValue": "[OverviewViewerComponent]"
      },
      {
        "name": "declarations",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "projects/ng-live-docs/src/source-code-viewer/source-code-viewer.module.ts",
        "type": "[]",
        "defaultValue": "[SourceCodeViewerComponent]"
      },
      {
        "name": "Documentation",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "projects/ng-live-docs/src/documentation.ts",
        "type": "object",
        "defaultValue": "{\n    /**\n     * Returns all the documentation entries registered into the framework\n     */\n    getAllEntries(): DocumentationEntry[] {\n        return Array.from(documentationEntryMap.values());\n    },\n\n    /**\n     * Returns angular routes used when displaying the documentation/examples for the components.\n     */\n    getRoutes(): Routes {\n        return Documentation.getAllEntries().map((documentationEntry: DocumentationEntry) => ({\n            path: documentationEntry.urlSegment,\n            component: DocumentationContainerComponent,\n            data: { documentationEntry },\n        }));\n    },\n\n    /**\n     * Used for manual registration of documentation entry with a corresponding component.\n     */\n    registerDocumentationEntry(documentationEntry: DocumentationEntry): void {\n        validateDocumentationMetadata(documentationEntry);\n        documentationEntryMap.set(documentationEntry.component, documentationEntry);\n    },\n}"
      },
      {
        "name": "DOCUMENTATION_DATA",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "projects/ng-live-docs/src/ng-live-docs.module.ts",
        "type": "",
        "defaultValue": "new InjectionToken<CompodocSchema[]>(\n    'NgLiveDocsModule.forRoot() CompoDocRetrieverService doc jsons.'\n)",
        "description": "<p>NOTE: The following two has to be exported otherwise the AoT compiler won&#39;t see it.</p>\n"
      },
      {
        "name": "documentationEntryMap",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "projects/ng-live-docs/src/documentation.ts",
        "type": "",
        "defaultValue": "new Map<Type<unknown>, DocumentationEntry>()",
        "description": "<p>To register a documentation entry as value for corresponding component</p>\n"
      },
      {
        "name": "modules",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "projects/ng-live-docs/scripts/create-module-data.ts",
        "type": "",
        "defaultValue": "generateDocumentation(process.argv.slice(2), {\n    target: ts.ScriptTarget.ES5,\n    module: ts.ModuleKind.CommonJS,\n})"
      },
      {
        "name": "NG_MODULE",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "projects/ng-live-docs/scripts/create-module-data.ts",
        "type": "string",
        "defaultValue": "'NgModule'"
      },
      {
        "name": "STACKBLITZ_DATA",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "projects/ng-live-docs/src/ng-live-docs.module.ts",
        "type": "",
        "defaultValue": "new InjectionToken<StackBlitzInfo>(\n    'NgLiveDocsModule.forRoot() StackBlitz template JSON data'\n)",
        "description": "<p>Token that makes Stqckblitz JSON data available to factory functions</p>\n"
      },
      {
        "name": "STACKBLITZ_INFO",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "projects/ng-live-docs/src/stack-blitz-writer.service.ts",
        "type": "",
        "defaultValue": "new InjectionToken<StackBlitzInfo>('StackBlitz Template information')"
      }
    ],
    "functions": [
      {
        "name": "generateDocumentation",
        "file": "projects/ng-live-docs/scripts/create-module-data.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "<p>Get the source code for files containing NgModules</p>\n",
        "args": [
          {
            "name": "fileNames"
          },
          {
            "name": "options"
          }
        ],
        "returnType": "ModuleEntries",
        "jsdoctags": [
          {
            "name": {
              "pos": 373,
              "end": 382,
              "flags": 0,
              "escapedText": "fileNames"
            },
            "tagName": {
              "pos": 367,
              "end": 372,
              "flags": 0,
              "escapedText": "param"
            },
            "comment": "<p>Entry points to be scanned</p>\n"
          },
          {
            "name": {
              "pos": 420,
              "end": 427,
              "flags": 0,
              "escapedText": "options"
            },
            "tagName": {
              "pos": 414,
              "end": 419,
              "flags": 0,
              "escapedText": "param"
            },
            "comment": "<p>Options to be passed to <code>ts.createProgram</code></p>\n"
          },
          {
            "tagName": {
              "pos": 475,
              "end": 481,
              "flags": 0,
              "escapedText": "return"
            },
            "comment": "<p>A map keyed by the module class names</p>\n"
          }
        ]
      },
      {
        "name": "getCompoDocRetrieverService",
        "file": "projects/ng-live-docs/src/ng-live-docs.module.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "documentations"
          }
        ],
        "returnType": "DocumentationRetrieverService",
        "jsdoctags": [
          {
            "name": "documentations",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "getStackBlitzWriter",
        "file": "projects/ng-live-docs/src/ng-live-docs.module.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "",
        "args": [
          {
            "name": "sbData"
          },
          {
            "name": "docRetrieverService"
          }
        ],
        "returnType": "StackBlitzWriterService",
        "jsdoctags": [
          {
            "name": "sbData",
            "tagName": {
              "text": "param"
            }
          },
          {
            "name": "docRetrieverService",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      {
        "name": "validateDocumentationMetadata",
        "file": "projects/ng-live-docs/src/documentation.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "description": "<p>Used in {@link Documentation.registerDocumentationEntry} method to check if the input is a valid {@link DocumentationEntry}</p>\n",
        "args": [
          {
            "name": "documentationParams"
          }
        ],
        "returnType": "void",
        "jsdoctags": [
          {
            "name": "documentationParams",
            "tagName": {
              "text": "param"
            }
          }
        ]
      }
    ],
    "typealiases": [],
    "enumerations": [],
    "groupedVariables": {
      "projects/ng-live-docs/src/stack-blitz-writer.service.ts": [
        {
          "name": "APP_COMPONENT_HTML",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "projects/ng-live-docs/src/stack-blitz-writer.service.ts",
          "type": "string",
          "defaultValue": "'src/app/app.component.html'"
        },
        {
          "name": "APP_MODULE",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "projects/ng-live-docs/src/stack-blitz-writer.service.ts",
          "type": "string",
          "defaultValue": "'src/app/app.module.ts'"
        },
        {
          "name": "STACKBLITZ_INFO",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "projects/ng-live-docs/src/stack-blitz-writer.service.ts",
          "type": "",
          "defaultValue": "new InjectionToken<StackBlitzInfo>('StackBlitz Template information')"
        }
      ],
      "projects/ng-live-docs/src/ng-live-docs.module.ts": [
        {
          "name": "declarations",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "projects/ng-live-docs/src/ng-live-docs.module.ts",
          "type": "[]",
          "defaultValue": "[]"
        },
        {
          "name": "DOCUMENTATION_DATA",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "projects/ng-live-docs/src/ng-live-docs.module.ts",
          "type": "",
          "defaultValue": "new InjectionToken<CompodocSchema[]>(\n    'NgLiveDocsModule.forRoot() CompoDocRetrieverService doc jsons.'\n)",
          "description": "<p>NOTE: The following two has to be exported otherwise the AoT compiler won&#39;t see it.</p>\n"
        },
        {
          "name": "STACKBLITZ_DATA",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "projects/ng-live-docs/src/ng-live-docs.module.ts",
          "type": "",
          "defaultValue": "new InjectionToken<StackBlitzInfo>(\n    'NgLiveDocsModule.forRoot() StackBlitz template JSON data'\n)",
          "description": "<p>Token that makes Stqckblitz JSON data available to factory functions</p>\n"
        }
      ],
      "projects/ng-live-docs/src/api-viewer/api-viewer.module.ts": [
        {
          "name": "declarations",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "projects/ng-live-docs/src/api-viewer/api-viewer.module.ts",
          "type": "[]",
          "defaultValue": "[ApiViewerComponent]"
        }
      ],
      "projects/ng-live-docs/src/documentation-container/documentation-container.module.ts": [
        {
          "name": "declarations",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "projects/ng-live-docs/src/documentation-container/documentation-container.module.ts",
          "type": "[]",
          "defaultValue": "[DocumentationContainerComponent]"
        }
      ],
      "projects/ng-live-docs/src/example-viewer/example-viewer.module.ts": [
        {
          "name": "declarations",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "projects/ng-live-docs/src/example-viewer/example-viewer.module.ts",
          "type": "[]",
          "defaultValue": "[ExampleViewerComponent]"
        }
      ],
      "projects/ng-live-docs/src/overview-viewer/overview-viewer.module.ts": [
        {
          "name": "declarations",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "projects/ng-live-docs/src/overview-viewer/overview-viewer.module.ts",
          "type": "[]",
          "defaultValue": "[OverviewViewerComponent]"
        }
      ],
      "projects/ng-live-docs/src/source-code-viewer/source-code-viewer.module.ts": [
        {
          "name": "declarations",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "projects/ng-live-docs/src/source-code-viewer/source-code-viewer.module.ts",
          "type": "[]",
          "defaultValue": "[SourceCodeViewerComponent]"
        }
      ],
      "projects/ng-live-docs/src/documentation.ts": [
        {
          "name": "Documentation",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "projects/ng-live-docs/src/documentation.ts",
          "type": "object",
          "defaultValue": "{\n    /**\n     * Returns all the documentation entries registered into the framework\n     */\n    getAllEntries(): DocumentationEntry[] {\n        return Array.from(documentationEntryMap.values());\n    },\n\n    /**\n     * Returns angular routes used when displaying the documentation/examples for the components.\n     */\n    getRoutes(): Routes {\n        return Documentation.getAllEntries().map((documentationEntry: DocumentationEntry) => ({\n            path: documentationEntry.urlSegment,\n            component: DocumentationContainerComponent,\n            data: { documentationEntry },\n        }));\n    },\n\n    /**\n     * Used for manual registration of documentation entry with a corresponding component.\n     */\n    registerDocumentationEntry(documentationEntry: DocumentationEntry): void {\n        validateDocumentationMetadata(documentationEntry);\n        documentationEntryMap.set(documentationEntry.component, documentationEntry);\n    },\n}"
        },
        {
          "name": "documentationEntryMap",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "projects/ng-live-docs/src/documentation.ts",
          "type": "",
          "defaultValue": "new Map<Type<unknown>, DocumentationEntry>()",
          "description": "<p>To register a documentation entry as value for corresponding component</p>\n"
        }
      ],
      "projects/ng-live-docs/scripts/create-module-data.ts": [
        {
          "name": "modules",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "projects/ng-live-docs/scripts/create-module-data.ts",
          "type": "",
          "defaultValue": "generateDocumentation(process.argv.slice(2), {\n    target: ts.ScriptTarget.ES5,\n    module: ts.ModuleKind.CommonJS,\n})"
        },
        {
          "name": "NG_MODULE",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "projects/ng-live-docs/scripts/create-module-data.ts",
          "type": "string",
          "defaultValue": "'NgModule'"
        }
      ]
    },
    "groupedFunctions": {
      "projects/ng-live-docs/scripts/create-module-data.ts": [
        {
          "name": "generateDocumentation",
          "file": "projects/ng-live-docs/scripts/create-module-data.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "<p>Get the source code for files containing NgModules</p>\n",
          "args": [
            {
              "name": "fileNames"
            },
            {
              "name": "options"
            }
          ],
          "returnType": "ModuleEntries",
          "jsdoctags": [
            {
              "name": {
                "pos": 373,
                "end": 382,
                "flags": 0,
                "escapedText": "fileNames"
              },
              "tagName": {
                "pos": 367,
                "end": 372,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<p>Entry points to be scanned</p>\n"
            },
            {
              "name": {
                "pos": 420,
                "end": 427,
                "flags": 0,
                "escapedText": "options"
              },
              "tagName": {
                "pos": 414,
                "end": 419,
                "flags": 0,
                "escapedText": "param"
              },
              "comment": "<p>Options to be passed to <code>ts.createProgram</code></p>\n"
            },
            {
              "tagName": {
                "pos": 475,
                "end": 481,
                "flags": 0,
                "escapedText": "return"
              },
              "comment": "<p>A map keyed by the module class names</p>\n"
            }
          ]
        }
      ],
      "projects/ng-live-docs/src/ng-live-docs.module.ts": [
        {
          "name": "getCompoDocRetrieverService",
          "file": "projects/ng-live-docs/src/ng-live-docs.module.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "documentations"
            }
          ],
          "returnType": "DocumentationRetrieverService",
          "jsdoctags": [
            {
              "name": "documentations",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getStackBlitzWriter",
          "file": "projects/ng-live-docs/src/ng-live-docs.module.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "",
          "args": [
            {
              "name": "sbData"
            },
            {
              "name": "docRetrieverService"
            }
          ],
          "returnType": "StackBlitzWriterService",
          "jsdoctags": [
            {
              "name": "sbData",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "docRetrieverService",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "projects/ng-live-docs/src/documentation.ts": [
        {
          "name": "validateDocumentationMetadata",
          "file": "projects/ng-live-docs/src/documentation.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "description": "<p>Used in {@link Documentation.registerDocumentationEntry} method to check if the input is a valid {@link DocumentationEntry}</p>\n",
          "args": [
            {
              "name": "documentationParams"
            }
          ],
          "returnType": "void",
          "jsdoctags": [
            {
              "name": "documentationParams",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ]
    },
    "groupedEnumerations": {},
    "groupedTypeAliases": {}
  },
  "routes": [],
  "coverage": {
    "count": 36,
    "status": "medium",
    "files": [
      {
        "filePath": "projects/ng-live-docs/scripts/create-module-data.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "ModuleEntries",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "projects/ng-live-docs/scripts/create-module-data.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "ModuleEntry",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "projects/ng-live-docs/scripts/create-module-data.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "generateDocumentation",
        "coveragePercent": 100,
        "coverageCount": "1/1",
        "status": "very-good"
      },
      {
        "filePath": "projects/ng-live-docs/scripts/create-module-data.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "modules",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "projects/ng-live-docs/scripts/create-module-data.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "NG_MODULE",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "projects/ng-live-docs/src/api-viewer/api-viewer.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ApiViewerComponent",
        "coveragePercent": 20,
        "coverageCount": "1/5",
        "status": "low"
      },
      {
        "filePath": "projects/ng-live-docs/src/api-viewer/api-viewer.module.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "declarations",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "projects/ng-live-docs/src/compodoc/compodoc-retriever.service.ts",
        "type": "class",
        "linktype": "classe",
        "name": "CompoDocRetrieverService",
        "coveragePercent": 10,
        "coverageCount": "1/10",
        "status": "low"
      },
      {
        "filePath": "projects/ng-live-docs/src/compodoc/compodoc-schema.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "CompodocComponent",
        "coveragePercent": 8,
        "coverageCount": "1/12",
        "status": "low"
      },
      {
        "filePath": "projects/ng-live-docs/src/compodoc/compodoc-schema.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "CompodocModule",
        "coveragePercent": 20,
        "coverageCount": "1/5",
        "status": "low"
      },
      {
        "filePath": "projects/ng-live-docs/src/compodoc/compodoc-schema.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "CompodocSchema",
        "coveragePercent": 33,
        "coverageCount": "1/3",
        "status": "medium"
      },
      {
        "filePath": "projects/ng-live-docs/src/compodoc/compodoc-schema.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "StyleUrlsData",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "projects/ng-live-docs/src/documentation-container/documentation-container.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "DocumentationContainerComponent",
        "coveragePercent": 25,
        "coverageCount": "1/4",
        "status": "low"
      },
      {
        "filePath": "projects/ng-live-docs/src/documentation-container/documentation-container.module.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "declarations",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "projects/ng-live-docs/src/documentation-retriever.service.ts",
        "type": "class",
        "linktype": "classe",
        "name": "DocumentationRetrieverService",
        "coveragePercent": 100,
        "coverageCount": "9/9",
        "status": "very-good"
      },
      {
        "filePath": "projects/ng-live-docs/src/documentation-retriever.service.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "ApiParameters",
        "coveragePercent": 100,
        "coverageCount": "4/4",
        "status": "very-good"
      },
      {
        "filePath": "projects/ng-live-docs/src/documentation.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "DocumentationEntry",
        "coveragePercent": 100,
        "coverageCount": "5/5",
        "status": "very-good"
      },
      {
        "filePath": "projects/ng-live-docs/src/documentation.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "ExampleEntry",
        "coveragePercent": 100,
        "coverageCount": "4/4",
        "status": "very-good"
      },
      {
        "filePath": "projects/ng-live-docs/src/documentation.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "validateDocumentationMetadata",
        "coveragePercent": 100,
        "coverageCount": "1/1",
        "status": "very-good"
      },
      {
        "filePath": "projects/ng-live-docs/src/documentation.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Documentation",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "projects/ng-live-docs/src/documentation.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "documentationEntryMap",
        "coveragePercent": 100,
        "coverageCount": "1/1",
        "status": "very-good"
      },
      {
        "filePath": "projects/ng-live-docs/src/example-viewer/example-viewer.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ExampleViewerComponent",
        "coveragePercent": 33,
        "coverageCount": "3/9",
        "status": "medium"
      },
      {
        "filePath": "projects/ng-live-docs/src/example-viewer/example-viewer.module.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "declarations",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "projects/ng-live-docs/src/ng-live-docs.module.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "getCompoDocRetrieverService",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "projects/ng-live-docs/src/ng-live-docs.module.ts",
        "type": "function",
        "linksubtype": "function",
        "name": "getStackBlitzWriter",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "projects/ng-live-docs/src/ng-live-docs.module.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "declarations",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "projects/ng-live-docs/src/ng-live-docs.module.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "DOCUMENTATION_DATA",
        "coveragePercent": 100,
        "coverageCount": "1/1",
        "status": "very-good"
      },
      {
        "filePath": "projects/ng-live-docs/src/ng-live-docs.module.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "STACKBLITZ_DATA",
        "coveragePercent": 100,
        "coverageCount": "1/1",
        "status": "very-good"
      },
      {
        "filePath": "projects/ng-live-docs/src/overview-viewer/overview-viewer.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "OverviewViewerComponent",
        "coveragePercent": 20,
        "coverageCount": "1/5",
        "status": "low"
      },
      {
        "filePath": "projects/ng-live-docs/src/overview-viewer/overview-viewer.module.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "declarations",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "projects/ng-live-docs/src/source-code-viewer/source-code-viewer.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "SourceCodeViewerComponent",
        "coveragePercent": 40,
        "coverageCount": "2/5",
        "status": "medium"
      },
      {
        "filePath": "projects/ng-live-docs/src/source-code-viewer/source-code-viewer.module.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "declarations",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "projects/ng-live-docs/src/stack-blitz-writer.service.ts",
        "type": "class",
        "linktype": "classe",
        "name": "StackBlitzWriterService",
        "coveragePercent": 33,
        "coverageCount": "3/9",
        "status": "medium"
      },
      {
        "filePath": "projects/ng-live-docs/src/stack-blitz-writer.service.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "StackBlitzDependencies",
        "coveragePercent": 100,
        "coverageCount": "1/1",
        "status": "very-good"
      },
      {
        "filePath": "projects/ng-live-docs/src/stack-blitz-writer.service.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "StackBlitzFileSystem",
        "coveragePercent": 100,
        "coverageCount": "1/1",
        "status": "very-good"
      },
      {
        "filePath": "projects/ng-live-docs/src/stack-blitz-writer.service.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "StackBlitzInfo",
        "coveragePercent": 75,
        "coverageCount": "3/4",
        "status": "good"
      },
      {
        "filePath": "projects/ng-live-docs/src/stack-blitz-writer.service.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "APP_COMPONENT_HTML",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "projects/ng-live-docs/src/stack-blitz-writer.service.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "APP_MODULE",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "projects/ng-live-docs/src/stack-blitz-writer.service.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "STACKBLITZ_INFO",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      }
    ]
  }
}
